<project><name>Trend_Prediction_ARIMA</name><id>168</id><version> V2 </version><page id='1' name='home'><PageHeight>undefined</PageHeight><PageWidth>undefined</PageWidth><PageBackgroundColor>undefined</PageBackgroundColor><PageCssCode></PageCssCode><PageParameters><Parameter name='PageId'><Type>label</Type><Value>1</Value><Name>PageId</Name><DisplayName>Page Id</DisplayName></Parameter><Parameter name='PageName'><Type>input</Type><Value>home</Value><Name>PageName</Name><DisplayName>Page Name</DisplayName></Parameter><Parameter name='PageType'><Type>Select</Type><Value>Standard,Template</Value><SelectedValue>Standard</SelectedValue><Name>PageType</Name><DisplayName>Page Type</DisplayName></Parameter><Parameter name='PageTemplateId'><Type>hidden</Type><Value></Value><Name>PageTemplateId</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='TemplatePages'><Type>hidden</Type><Value></Value><SelectedValue></SelectedValue><Name>TemplatePages</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='MultiTemplatePages'><Type>MultiSelection</Type><Value>{}</Value><SelectedValue></SelectedValue><Name>MultiTemplatePages</Name><DisplayName>Templates Name</DisplayName></Parameter><Parameter name='PageMenuId'><Type>hidden</Type><Value></Value><Name>PageMenuId</Name><DisplayName>Page menu name</DisplayName></Parameter><Parameter name='PreventLoadingIcon'><Type>True/False</Type><Value>0</Value><Name>PreventLoadingIcon</Name><DisplayName>Prevent Loading Icon</DisplayName></Parameter><Parameter name='RequireSensorList'><Type>True/False</Type><Value>0</Value><DisplayName>Get sensors list in RTE</DisplayName><Name>RequireSensorList</Name></Parameter><Parameter name='RequireAppList'><Type>True/False</Type><Value>0</Value><DisplayName>Get applications list in RTE</DisplayName><Name>RequireAppList</Name></Parameter><Parameter name='PageKeyword'><Type>input</Type><Value></Value><Name>PageKeyword</Name><DisplayName>Page Keywords</DisplayName></Parameter><Parameter name='PageDescription'><Type>input</Type><Value></Value><Name>PageDescription</Name><DisplayName>Description</DisplayName></Parameter><Parameter name='PageHeight'><Type>input</Type><Value>650</Value><Name>PageHeight</Name><DisplayName>Page Height</DisplayName></Parameter><Parameter name='PageWidth'><Type>input</Type><Value>1286</Value><Name>PageWidth</Name><DisplayName>Page Width</DisplayName></Parameter><Parameter name='BackGroundColor'><Type>color</Type><Value></Value><Name>BackGroundColor</Name><DisplayName>BackGround Color</DisplayName></Parameter><Parameter name='CssCode'><Type>Css</Type><Value></Value><Name>CssCode</Name><DisplayName>Page Css</DisplayName></Parameter><Parameter name='PageOnLoad'><Name>PageOnLoad</Name><Type>event</Type><Value></Value><DisplayName>OnPageLoad</DisplayName></Parameter><Parameter name='globalFunVar'><Name>globalFunVar</Name><Type>event</Type><Value></Value><DisplayName>Global Functions And Variables</DisplayName></Parameter><Parameter name='onclick'><Name>onclick</Name><Type>event</Type><Value></Value><DisplayName>OnClick</DisplayName></Parameter><Parameter name='ondbclick'><Name>ondbclick</Name><Type>event</Type><Value></Value><DisplayName>OnDbClick</DisplayName></Parameter><Parameter name='onrightclick'><Name>onrightclick</Name><Type>event</Type><Value></Value><DisplayName>OnRightClick</DisplayName></Parameter><Parameter name='onmousemove'><Name>onmousemove</Name><Type>event</Type><Value></Value><DisplayName>OnMouseMove</DisplayName></Parameter><Parameter name='onmouseover'><Name>onmouseover</Name><Type>event</Type><Value></Value><DisplayName>OnMouseOver</DisplayName></Parameter><Parameter name='IsPageDeleted'><Type>hidden</Type><Name>IsPageDeleted</Name><Value>true</Value><DisplayName></DisplayName></Parameter><Parameter name='SensorsReffrence'><Name>SensorsReffrence</Name><Type>hidden</Type><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateCss'><Type>hidden</Type><Name>templateCss</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateGlobalFunction'><Type>hidden</Type><Name>templateGlobalFunction</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateOnLoad'><Type>hidden</Type><Name>templateOnLoad</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='Saved'><Type>false</Type><Value>false</Value><Name>false</Name><DisplayName></DisplayName></Parameter><Parameter name='PageIssus'><Type>PageIssus</Type><Value></Value><Name>PageIssus</Name><DisplayName>Page Issues</DisplayName></Parameter></PageParameters><script>
function Plugin_onclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onclick();
 break;
}
}
function Plugin_ondbclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_ondbclick();
 break;
}
}
function Plugin_onmouseover(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onrightclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmouseleave(pluginName){
switch(pluginName){
case 'Page home':{
undefined 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmousemove(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function GetMyPageId(){return 0;}
function GetMyProjectId(){return 168;}
RedrawRTEBGPlugins();
function RedrawRTEBGPlugins(){
if(window.RTEBackGroundPlugins != undefined){
if(window.RTEBackGroundPlugins.length&gt;0){
            for(var j=0; j &lt; window.RTEBackGroundPlugins.length; j++){
            var PluginIndex=window.RTEBackGroundPlugins[j].PluginIndex;
            var PluginDiv=window.RTEBackGroundPlugins[j].PluginDiv;
            var PluginDivId=window.RTEBackGroundPlugins[j].PluginDivId;
            IDEObject.CurrentProject.ProjectPagesList[0].UsedPluginsList[PluginIndex].Draw(PluginDiv,PluginDivId);
            }
}}};</script></page><page id='2' name='home'><PageHeight>undefined</PageHeight><PageWidth>undefined</PageWidth><PageBackgroundColor>undefined</PageBackgroundColor><PageCssCode></PageCssCode><PageParameters><Parameter name='PageId'><Type>label</Type><Value>2</Value><Name>PageId</Name><DisplayName>Page Id</DisplayName></Parameter><Parameter name='PageName'><Type>input</Type><Value>home</Value><Name>PageName</Name><DisplayName>Page Name</DisplayName></Parameter><Parameter name='PageType'><Type>Select</Type><Value>Standard,Template</Value><SelectedValue>Standard</SelectedValue><Name>PageType</Name><DisplayName>Page Type</DisplayName></Parameter><Parameter name='PageTemplateId'><Type>hidden</Type><Value></Value><Name>PageTemplateId</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='TemplatePages'><Type>hidden</Type><Value></Value><SelectedValue></SelectedValue><Name>TemplatePages</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='MultiTemplatePages'><Type>MultiSelection</Type><Value>{}</Value><SelectedValue></SelectedValue><Name>MultiTemplatePages</Name><DisplayName>Templates Name</DisplayName></Parameter><Parameter name='PageMenuId'><Type>hidden</Type><Value></Value><Name>PageMenuId</Name><DisplayName>Page menu name</DisplayName></Parameter><Parameter name='PreventLoadingIcon'><Type>True/False</Type><Value>1</Value><Name>PreventLoadingIcon</Name><DisplayName>Prevent Loading Icon</DisplayName></Parameter><Parameter name='RequireSensorList'><Type>True/False</Type><Value>0</Value><DisplayName>Get sensors list in RTE</DisplayName><Name>RequireSensorList</Name></Parameter><Parameter name='RequireAppList'><Type>True/False</Type><Value>0</Value><DisplayName>Get applications list in RTE</DisplayName><Name>RequireAppList</Name></Parameter><Parameter name='PageKeyword'><Type>input</Type><Value></Value><Name>PageKeyword</Name><DisplayName>Page Keywords</DisplayName></Parameter><Parameter name='PageDescription'><Type>input</Type><Value></Value><Name>PageDescription</Name><DisplayName>Description</DisplayName></Parameter><Parameter name='PageHeight'><Type>input</Type><Value>650</Value><Name>PageHeight</Name><DisplayName>Page Height</DisplayName></Parameter><Parameter name='PageWidth'><Type>input</Type><Value>1286</Value><Name>PageWidth</Name><DisplayName>Page Width</DisplayName></Parameter><Parameter name='BackGroundColor'><Type>color</Type><Value></Value><Name>BackGroundColor</Name><DisplayName>BackGround Color</DisplayName></Parameter><Parameter name='CssCode'><Type>Css</Type><Value></Value><Name>CssCode</Name><DisplayName>Page Css</DisplayName></Parameter><Parameter name='PageOnLoad'><Name>PageOnLoad</Name><Type>event</Type><Value>function DataListgetAsync(name) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name
      }

      ;

      DataList.get(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res)
      }
    }

  );
}

DataListgetAsync(&apos;class_room_Adel_10&apos;).then(results =&gt; {
    if (results[&apos;result&apos;].length &gt; 0) {

      SetPluginParameterValue(&apos;Train&apos;, &apos;Caption&apos;, &apos;Trained&apos;);
      SetPluginParameterValue(&apos;Flag&apos;, &apos;Color&apos;, &apos;green&apos;);
      DrawPlugin(&apos;Train&apos;);
      DrawPlugin(&apos;Flag&apos;);
    } else {
      SetPluginParameterValue(&apos;Clear&apos;, &apos;Visible&apos;, 0);
      DrawPlugin(&apos;Clear&apos;);
      SetPluginParameterValue(&apos;Predict&apos;, &apos;Visible&apos;, 0);
      DrawPlugin(&apos;Predict&apos;);

    }
  }

).then(event.end);</Value><DisplayName>OnPageLoad</DisplayName></Parameter><Parameter name='globalFunVar'><Name>globalFunVar</Name><Type>event</Type><Value></Value><DisplayName>Global Functions And Variables</DisplayName></Parameter><Parameter name='onclick'><Name>onclick</Name><Type>event</Type><Value></Value><DisplayName>OnClick</DisplayName></Parameter><Parameter name='ondbclick'><Name>ondbclick</Name><Type>event</Type><Value></Value><DisplayName>OnDbClick</DisplayName></Parameter><Parameter name='onrightclick'><Name>onrightclick</Name><Type>event</Type><Value></Value><DisplayName>OnRightClick</DisplayName></Parameter><Parameter name='onmousemove'><Name>onmousemove</Name><Type>event</Type><Value></Value><DisplayName>OnMouseMove</DisplayName></Parameter><Parameter name='onmouseover'><Name>onmouseover</Name><Type>event</Type><Value></Value><DisplayName>OnMouseOver</DisplayName></Parameter><Parameter name='IsPageDeleted'><Type>hidden</Type><Name>IsPageDeleted</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='SensorsReffrence'><Name>SensorsReffrence</Name><Type>hidden</Type><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateCss'><Type>hidden</Type><Name>templateCss</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateGlobalFunction'><Type>hidden</Type><Name>templateGlobalFunction</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateOnLoad'><Type>hidden</Type><Name>templateOnLoad</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='Saved'><Type>false</Type><Value>false</Value><Name>false</Name><DisplayName></DisplayName></Parameter><Parameter name='PageIssus'><Type>PageIssus</Type><Value></Value><Name>PageIssus</Name><DisplayName>Page Issues</DisplayName></Parameter></PageParameters><usedPlugin category ='installed' type='LabelPlugin' PageSource='undefined'><location><x>14</x><y>35</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >{&quot;&quot;:&quot;&quot;}</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >LabelPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Label 1</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >14</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >35</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LabelValue' ><Name type='singleValue' >LabelValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >ARIMA Model Monitoring</Value><DisplayName type='singleValue' >Caption</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='MultipleLine' ><Name type='singleValue' >MultipleLine</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple lines</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Scroll' ><Name type='singleValue' >Scroll</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Scroll</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextRotation' ><Name type='singleValue' >TextRotation</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>rotate(0deg)</element><element>rotate(90deg)</element><element>rotate(270deg)</element></Value><DisplayName type='singleValue' >Rotation</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >rotate(0deg)</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>6px</element><element>8px</element><element>10px</element><element>12px</element><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element><element>30px</element><element>32px</element><element>34px</element><element>36px</element><element>38px</element><element>40px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >40px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courier New</element><element>Times New Roman</element><element>Galada</element><element>Roboto</element><element>Droid Serif Normal</element><element>Droid Serif Italic</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Droid Serif Italic</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >oblique</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >900</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#004cff</Value><DisplayName type='singleValue' >Font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackGroundColor' ><Name type='singleValue' >BackGroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextDirection' ><Name type='singleValue' >TextDirection</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left To Right</element><element>Right To Left</element></Value><DisplayName type='singleValue' >Text Direction</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left To Right</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlignment' ><Name type='singleValue' >TextAlignment</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left</element><element>Right</element><element>Center</element></Value><DisplayName type='singleValue' >Text Alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='TimerPlugin' PageSource='undefined'><location><x>113</x><y>27</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >TimerPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Timer</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >113</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >27</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >50</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >50</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Duration' ><Name type='singleValue' >Duration</Name><Type type='singleValue' >input</Type><Value type='singleValue' >8000</Value><DisplayName type='singleValue' >Duration </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ontimerTick' ><Name type='singleValue' >ontimerTick</Name><Type type='singleValue' >event</Type><Value type='singleValue' >//************* Start Set Query Parameter Value  For LineChart 1 ************ 

ExecuteQueryModified(&apos;SELECT `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` asc &apos;, LineChart_1_callbackFunc, &apos;LineChart 1&apos;);

function LineChart_1_callbackFunc(error, xhr) {
  if (xhr.response) {
    LineChart_1DataArr = JSON.parse(xhr.response);
    SetPluginParameterValue(&apos;LineChart 1&apos;, &apos;SQL query statement&apos;, LineChart_1DataArr);
    DrawPlugin(&apos;LineChart 1&apos;);
  } //End If 
} //End CB function 

//***************** End Set Query Parameter  ************** 

//************* Start Set Query Parameter Value  For Grid 1 ************ 

ExecuteQueryModified(&apos;SELECT  `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` desc&apos;, Grid_1_callbackFunc, &apos;Grid 1&apos;);

function Grid_1_callbackFunc(error, xhr) {
  if (xhr.response) {
    Grid_1DataArr = JSON.parse(xhr.response);
    SetPluginParameterValue(&apos;Grid 1&apos;, &apos;SQL query statement&apos;, Grid_1DataArr);
    DrawPlugin(&apos;Grid 1&apos;);
  } //End If 
} //End CB function 

//***************** End Set Query Parameter  ************** </Value><DisplayName type='singleValue' >Timer Tick</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Start' ><Name type='singleValue' >Start</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Active</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Recurrence' ><Name type='singleValue' >Recurrence</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Recurrence</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='GridPlugin' PageSource='undefined'><location><x>958</x><y>199</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >MM/DD/YYYY, h:mm:ss a</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >false</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >{}</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >GridPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Grid 1</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >958</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >199</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >368</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >390</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >412,TimeStamp,currentLuxValue</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' >SELECT  `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` desc</Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >dashed</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EnableScroll' ><Name type='singleValue' >EnableScroll</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Enable Scroll</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PrintTitle' ><Name type='singleValue' >PrintTitle</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Printing Title</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >15</Value><DisplayName type='singleValue' >Font Size </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedRow' ><Name type='singleValue' >SelectedRow</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Selected Row </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedColumn' ><Name type='singleValue' >SelectedColumn</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Selected Column </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Selected Value</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedCell' ><Name type='singleValue' >SelectedCell</Name><Type type='singleValue' >input</Type><Value type='singleValue' >{&quot;SelectedRow&quot;:4,&quot;SelectedColumn&quot;:1,&quot;SelectedCell&quot;:&quot;Loading..&quot;}</Value><DisplayName type='singleValue' >Selected Cell</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SetStyle' ><Name type='singleValue' >SetStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>table</element><element>table table-striped</element><element>table table-bordered</element></Value><DisplayName type='singleValue' >Table style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >table</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Hover' ><Name type='singleValue' >Hover</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Hover</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Count' ><Name type='singleValue' >Count</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Count</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TableDrawingDirection' ><Name type='singleValue' >TableDrawingDirection</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>vertical</element><element>horizontal</element></Value><DisplayName type='singleValue' >Table Drawing Direction</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >vertical</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CellColor' ><Name type='singleValue' >CellColor</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Cell background color range</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ColorRange' ><Name type='singleValue' >ColorRange</Name><Type type='singleValue' >ColorRange</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Cell background color range</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HeaderBackgroundColor' ><Name type='singleValue' >HeaderBackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Header background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HeaderFontSize' ><Name type='singleValue' >HeaderFontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Header font size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HeaderFontColor' ><Name type='singleValue' >HeaderFontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000</Value><DisplayName type='singleValue' >Header font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CellFontSize' ><Name type='singleValue' >CellFontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Cell font size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CellFontColor' ><Name type='singleValue' >CellFontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000</Value><DisplayName type='singleValue' >Cell font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SampleData' ><Name type='singleValue' >SampleData</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Loading..</Value><DisplayName type='singleValue' >Sample Data</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ButtonPlugin' PageSource='undefined'><location><x>1011</x><y>11</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ButtonPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Train</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1011</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >11</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >262</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >35</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' >function DataListAddAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const dataListObj = {
        name: name,
        value: value,
        insertAt: &quot;tail&quot;
      }

      ;
      DataList.add(dataListObj, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListRemoveAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value,
        &quot;count&quot;: &quot;0&quot;
      };

      DataList.remove(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListgetAsync(name) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name
      };

      DataList.get(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res)
      }
    }

  );
}

function DataListupdateAsync(name, value, index) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value, // updated value
        &quot;index&quot;: index // updated index
      };

      DataList.update(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}


function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
      // SearchIn(query, searchIn_callback);
      ExecuteQueryModified(query, searchIn_callback, &apos;&apos;);

      function searchIn_callback(err, result) {
        if (err) {
          return reject(err);
        }

        // write your code here
        resolve(result);
      }
    }

  );
}

function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
      // SearchIn(query, searchIn_callback);
      ExecuteQueryModified(query, searchIn_callback, &apos;&apos;);

      function searchIn_callback(err, result) {
        if (err) {
          return reject(err);
        }

        // write your code here
        resolve(result);
      }
    }

  );
}

/**
 * naive compare array
 * https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730
 *
 * @param {Array} other
 * @returns
 */
Array.prototype.equalsTo = function(other) {
  return JSON.stringify(this) == JSON.stringify(other);
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 * @param {Array} arr
 * @param {number} depth
 * @returns
 */
function flat(arr, depth = 1) {
  return depth &gt; 0 ? arr.reduce((acc, val) =&gt; acc.concat(Array.isArray(val) ? flat(val, depth - 1) : val), []) :
    arr.slice();
}

/**
 *
 * @param {number} depth
 * @returns
 */
Array.prototype.flat = function(depth = 1) {
  return flat(this, depth);
}

class NDArray extends Array {

  /**
   * https://stackoverflow.com/questions/7135874/element-wise-operations-in-javascript
   * @param {NDArray|number} other
   * @param {callbackfn} op
   * @returns
   */
  iOperation(other, op) {
    let sThis = shape(this);

    if (typeof(other) === &quot;number&quot;) {
      return reshape(this.flatten().map(el =&gt; op(el, other)),
        sThis);
    }

    other = array(other);
    let sOther = shape(other);

    if (sThis.equalsTo(sOther)) {
      other = other.flatten();
      return reshape(this.flatten().map((el, i) =&gt; op(el, other[i])),
        sThis);
    } else {
      // TODO handling broadcasting
      sThis = resultantShape(sThis, sOther);
      other = broadcast(other, sThis).flatten();
    }

    return reshape(broadcast(this, sThis).flatten().map((el, i) =&gt; op(el, other[i])),
      sThis);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  add(other) {
    return this.iOperation(other, (a, b) =&gt; a + b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  mul(other) {
    return this.iOperation(other, (a, b) =&gt; a * b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  sub(other) {
    return this.iOperation(other, (a, b) =&gt; a - b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  div(other) {
    return this.iOperation(other, (a, b) =&gt; a / b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  equals(other) {
    return this.iOperation(other, (a, b) =&gt; a == b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  power(other) {
    return this.iOperation(other, (a, b) =&gt; a ** b);
  }

  /**
   *
   * @returns
   */
  flatten() {
    // FIXME not supported on MoT
    return this.flat(ndim(this) - 1);
  }

}

/**
 * a: array-like or iterable
 * @param {Array} a
 * @returns
 */
function array(a) {
  return NDArray.from(a);
}

/**
 *
 * @param {number|NDArray} size
 * @returns
 */
function empty(size) {
  if (typeof(size) === &quot;number&quot;) {
    return new NDArray(size);
  }

  if (size instanceof Array) {
    let p = 1;
    p = size.flat(size.length - 1).reduce((p, el) =&gt; p * el);
    return reshape(Array(p), size);
  }
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function zeros(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(0),
    size);
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function ones(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(1),
    size);
}

/**
 *
 * @param {NDArray} vector
 * @param {number} k
 * @returns
 */
function diag(vector, k = 0) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  let res = [];

  switch (ndim(vector)) {
    case 1:
      res = vector.length + Math.abs(k);
      res = Array(2).fill(res);
      res = zeros(res);

      for (let i = Math.max(0, -k), j = Math.max(0, k), l = 0; l &lt; vector.length; i++, j++, l++) {
        res[i][j] = vector[l];
      }

      return res;
    case 2:
      let lim = Math.min(...shape(vector));
      res = empty(lim);

      for (let i = 0; i &lt; lim; i++) {
        res[i] = vector[i][i];
      }

      return res;
    default:
      throw Error(&quot;Array must be 1D or 2D&quot;);
  }
}

/**
 * create an identity matrix
 * @param {number} size
 * @returns
 */
function eye(size) {
  return diag(ones(size));
}

/**
 * returns vector[i+1] - vector[i]
 * @param {NDArray} vector
 * @param {number} order
 * @returns
 */
function diff(vector, order = 1) {
  if (order == 0) {
    return vector;
  }

  let self = array(vector);

  for (let d = 0; d &lt; order; d++) {
    let other = self.slice(0, -1);
    self = self.slice(1);
    self = self.map((s, idx) =&gt; s - other[idx]);
  }

  return self;
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function cumsum(vector) {
  var total = 0;
  return vector.map((el) =&gt; total += el);
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function mean(vector) {
  return sum(array(vector)) / vector.length;
}

/**
 * number of dimensions of the array
 * @param {Array|NDArray} vector
 * @returns
 */
function ndim(vector) {
  let dim = 0;
  let self = [...vector];

  for (dim = 0; self instanceof Array; dim++) {
    self = self[0]; // FIXME array elements are not required to be the same here
  }

  return dim;
}

/**
 * FIXME transposing only 2D
 * https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript
 * @param {NDArray} vector
 * @returns
 */
function transpose(vector) {
  const dim = ndim(vector);

  if (dim == 1) {
    return vector;
  }

  if (dim == 2) {
    // return vector[0].map((_, j) =&gt;
    // 	vector.map((row) =&gt; row[j])
    // );
    return array(vector[0].map((_, j) =&gt; [...vector].map((row) =&gt; row[j])));
  }
}

/**
 * https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array
 * @param {Array|NDArray} vector
 * @returns
 */
function shape(vector) {
  let self = [...vector];
  const n = ndim(vector);

  let shape = [vector.length]
  for (let dim = 1; dim &lt; n; dim++) {
    shape.push(self[0].length);
    self = self[0];
  }

  return shape;
}

/**
 * reshapes the array into the given shape, if possible
 * @param {Array|NDArray} vector
 * @param {Array} size
 * @returns
 */
function reshape(vector, size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size];
  }

  if (size.map(el =&gt; el == -1).reduce((tot, el) =&gt; tot + el) &gt; 1) {
    throw Error(&quot;Cannot infer more than one dimension&quot;);
  }

  let tSize = 1;
  tSize = shape(vector).reduce((tSize, el) =&gt; tSize * el);
  let oSize = 1;
  oSize = size.reduce((oSize, el) =&gt; oSize * el);

  if (oSize &lt; 0) {
    switch (tSize % oSize) {
      case 0:
        let index = size.indexOf(-1);
        size[index] = -tSize / oSize;
        break;
      default:
        throw Error(&quot;Unable to infer missing dimension&quot;);
    }
  } else if (tSize != oSize) {
    throw Error(&quot;Incompatible shapes&quot;);
  }

  // vector = array(vector).flatten();
  vector = array(vector).flatten();
  // FIXME keeping the largest array as ndarray, &amp; internal arrays
  // as normal arrays
  vector = [...vector];
  let result = [];
  size = size.reverse();

  for (let idx = 0; idx &lt; size.length - 1; idx++) {
    let step = size[idx];

    for (let i = 0; i &lt; vector.length; i += step) {
      result.push(vector.slice(i, i + step));
    }

    vector = result;
    result = [];
  }

  // FIXME had to restore the original order for size
  size = size.reverse();
  return array(vector);
}

/**
 * TODO continue if needed
 * https://numpy.org/doc/stable/reference/generated/numpy.sum.html
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
 * @param {NDArray} vector
 * @param {number} axis
 * @param {number} initialValue
 * @returns
 */
function sum(vector, axis = null, initialValue = 0) {
  if ((ndim(vector) == 1) || axis === null) {
    // full array or 1D array
    return vector.flatten().reduce(((sum, el) =&gt; sum + el),
      initialValue);
  }

  // FIXME to avoid breaking
  return vector;
  // if ((axis &lt; 0) &amp;&amp; (-axis &lt;= this.length)) {
  // 	axis = this.length - axis
  // }
}

/**
 * FIXME implement higher dimensions
 * @param {NDArray} a
 * @param {NDArray} b
 * @returns
 */
function dot(a, b) {
  const shapeA = shape(a);
  const shapeB = shape(b);

  if (shapeA[shapeA.length - 1] != shapeB[0]) {
    throw Error(&quot;Internal dimension mismatch&quot;);
  }

  // vector dot product
  if ((ndim(a) == 1) &amp;&amp; (ndim(b) == 1)) {
    return sum(a.mul(b));
  }

  if (ndim(a) == 1) {
    a = transpose([a]);
  }

  if (ndim(b) == 1) {
    b = transpose([b]);
  }

  // FIXME 2D operation only
  b = transpose(b);
  return a.map(row =&gt; b.map(col =&gt; sum(array(row).mul(col))));
}

/**
 * check if given shapes allow for broadcasting
 * @param {Array} a
 * @param {Array} b
 * @returns
 */
function canBroadcast(a, b) {
  let [i,
    j
  ] = [Array.from(a).reverse(),
    Array.from(b).reverse()
  ];
  [i,
    j
  ] = (i.length &gt;= j.length) ? [i,
    j
  ] : [j, i];
  var res = true;
  j.map((el, idx) =&gt; res &amp;= (el == i[idx]) | (el == 1) | (i[idx] == 1));
  return res;
}

/**
 *
 * @param {Array} size0
 * @param {Array} size1
 * @returns
 */
function resultantShape(size0, size1) {
  matchDimensions(size0, size1);
  return size0.map((el, i) =&gt; Math.max(el, size1[i]));
}

/**
 *
 * @param {Array} a
 * @param {Array} b
 */
function matchDimensions(a, b) {
  var size = a.length - b.length;

  if (size &lt; 0) {
    a.unshift(...ones(-size));
  } else if (size &gt; 0) {
    b.unshift(...ones(size));
  }
}

/**
 * https://numpy.org/doc/stable/user/basics.broadcasting.html
 * @param {NDArray} vector
 * @param {Array} size
 * @returns
 */
function broadcast(vector, size) {
  let vSize = shape(vector);

  if (!canBroadcast(vSize, size)) {
    throw Error(&quot;Can not broadcast&quot;);
  }

  matchDimensions(vSize, size);
  vector = vector.flatten();
  var tempSize = [];

  for (let i = size.length - 1; i &gt;= 0; i--) {
    if (vSize[i] == size[i]) {
      tempSize.shift();
      tempSize.unshift(-1, size[i]);
      vector = reshape(vector, tempSize);
    } else {
      vector = vector.map(el =&gt; new NDArray(size[i]).fill(el));
      tempSize = shape(vector);
    }
  }

  return reshape(vector, size);
}

/**
 * https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
 * @param {number} start
 * @param {number} end
 * @param {number} step
 * @returns
 */
function arange(start, end, step) {
  if (end === undefined) {
    end = start;
    start = 0;
  }

  step = (step === undefined) ? 1 : step;

  if ((end &lt; start) &amp;&amp; (step &gt; 0)) {
    return [];
  }

  [start,
    end
  ] = (start &lt; end) ? [start,
    end
  ] : [end,
    start
  ];
  let res = array(Array(end).keys()).slice(start).filter(el =&gt; !((el - start) % step));
  return (step &gt;= 0) ? res : res.reverse();
}


/**
 *
 * @param {number} start
 * @param {number} stop
 * @param {number} num
 * @returns
 */
function linspace(start, stop, num = 50) {
  let step = (stop - start) / (num - 1);
  let res = [];

  for (let element = start; element &lt; stop; element += step) {
    // https://stackoverflow.com/questions/2221167/javascript-formatting-a-rounded-number-to-n-decimals
    res.push(parseFloat(element.toFixed(8)));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function vstack(elements) {
  let res = [];
  let size = shape(elements[0]);

  if (size.length == 1) {
    elements.forEach(el =&gt; res.push(el));
  } else {
    elements.forEach(el =&gt; res.push(...el));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function hstack(elements) {
  // FIXME edge case
  var res;

  if (ndim(elements[0]) == 1) {
    res = [];

    elements.forEach(el =&gt; {
        res.push(...el)
      }

    );
    return array(res);
  }

  res = elements.map(el =&gt; transpose(el));
  return transpose(vstack(res));
}

const linalg = {

  /**
   *
   * @param {NDArray} vector
   * @param {number} ord
   * @returns
   */
  norm: function(vector, ord = 2) {

    // FIXME edge cases
    if (ord === Infinity) {} else if (ord === -Infinity) {} else if (ord == 0) {}

    return sum(vector.power(ord)) ** 1 / ord
  }
}

const random = {

  /**
   *
   * @param {Array} size
   * @returns
   */
  random: function(size) {
    return reshape(empty(size).flatten().map(_ =&gt; Math.random()),
      size);
  }
}

np = {
  array,
  empty,
  diff,
  dot,
  ndim,
  reshape,
  shape,
  sum,
  transpose,
  diag,
  ones,
  zeros,
  eye,
  arange,
  vstack,
  hstack,
  NDArray,
  linalg,
  linspace,
  random,
  cumsum,
  mean
}

class GradientDescent {

  /**
   *
   * @param {number} learningRate
   * @param {object} kwargs
   */
  constructor(learningRate = 0.001, kwargs = {}

  ) {
    this._alpha = learningRate;
    this._W = kwargs[&quot;weights&quot;];
    this._gamma = kwargs[&quot;momentum&quot;] | 0;
    this._b = kwargs[&quot;batchSize&quot;];
    this._costFn = kwargs[&quot;costFunction&quot;];

    if (!this._costFn) {
      this._costFn = function(labels, predictions, m = null) {
        m = 2 * ((m) ? m : labels.length);
        return np.sum(labels.sub(predictions).power(2)) / m;
      }

      ;
    }

    // FIXME gradient is d[cost]/d_W, so it should be different for each cost function
    this._grad = kwargs[&quot;gradient&quot;];

    if (!this._grad) {
      this._grad = function(X, y, yHat) {
        var error = yHat.sub(y);
        return np.dot(np.transpose(X), error);
      }
    }

    // TODO nesterov update
    this._update = (kwargs[&quot;nesterov&quot;]) ? this.updateNesterov : function(gradient, m, vt1 = 0) {
      this._W = this._W.sub(this.vt(gradient, m, vt1));
    }

    ;
  }

  set alpha(learningRate) {
    this._alpha = learningRate;
  }

  get alpha() {
    return this._alpha;
  }

  set gamma(momentum) {
    this._gamma = momentum;
  }

  get gamma() {
    return this._gamma;
  }

  get _coef() {
    return this._W;
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  evaluate(X) {
    return np.dot(X, this._W);
  }

  updateNesterov(X, y, m, vt1) {
    // TODO implement nesterov&apos;s update
    throw Error(&quot;Method not implemented yet&quot;)
  }

  vt(gradient, m, vt1 = 0) {
    return gradient.mul(this._alpha).div(m).add(this._gamma * vt1);
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  async predict(X) {
    var features = X.slice();

    if (np.ndim(features) == 1) {
      features = np.reshape(features, [-1, 1]);
    }

    features = [np.ones([features.length, 1]),
      features
    ];
    features = np.hstack(features);
    return this.evaluate(features);
  }

  fitSync(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // let ut = 0 // TODO support adaptive grad
    var costOld;

    ({
        costOld,
        y,
        X
      }

      = this._fitInit(X, y));

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var {
        costCurrent,
        gradient
      }

      = this._runEpoch(X, y);

      if (this._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
  }

  _runEpoch(X, y) {
    var end,
      batchX,
      batchY,
      batchPreds,
      batchGrad;

    for (let start = 0; start &lt; y.length; start += this._b) {
      end = start + this._b;
      batchX = X.slice(start, end);
      batchY = y.slice(start, end);
      batchPreds = this.evaluate(batchX);
      batchGrad = this._grad(batchX, batchY, batchPreds);
      // TODO add nesterov update
      this._update(batchGrad, (this._b &gt; 1) ? this._b : y.length);
    }

    var costCurrent = this._costFn(batchY, batchPreds, this._b);

    return {
      costCurrent,
      gradient: batchGrad
    }

    ;
  }

  _fitInit(X, y) {
    var nRows = y.length;
    this._b = (this._b) ? this._b : nRows;
    // FIXME
    // var costOld = this._costFn(y.slice(-this._b), np.zeros([this._b]), this._b);
    var costOld = 0;
    X = np.hstack([np.ones([X.length, 1]), X]);
    y = np.reshape(y, [nRows, 1]);

    if (!this._W) {
      this._W = np.random.random([np.shape(X)[1], 1]);
    }

    return {
      costOld,
      y,
      X
    }

    ;
  }

  _converged(costOld, costCurrent, stopThreshold, batchGrad) {
    return !Math.abs(parseInt((costOld - costCurrent) / stopThreshold)) || !parseInt(np.linalg.norm(batchGrad) / stopThreshold);
  }

  /**
   *
   * @param {NDArray} X
   * @param {Array|NDArray} y
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // TODO flag to tell fit is done
    this.fitSync(X, y, maxIter, stopThreshold);
    return this;
  }
}

class AutoRegressionIntegratedMovingAverage extends GradientDescent {

  /**
   *
   * @param {number} p
   * @param {number} d
   * @param {number} q
   * @param {number} learningRate
   * @param {object} KWArgs
   */
  constructor(p, d, q, learningRate = .001, KWArgs = {}

  ) {
    super(learningRate, KWArgs);
    this._p = p;
    this._d = d;
    this._q = q;
  }

  get p() {
    return this._p;
  }

  get q() {
    return this._q;
  }

  get d() {
    return this._d;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} nCols
   * @returns
   */
  _buildPredictors(X, nCols) {
    var predictors = [];

    for (let idx = 1; idx &lt;= nCols; idx++) {
      predictors.push(...X.slice(nCols - idx, -idx));
    }

    return np.reshape(predictors, [-1, nCols]);
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {Array|NDArray} y
   */
  score(X, y) {
    // TODO to be implemented
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  /**
   * FIXME only works with AR variants [AR, ARI, ARIMA]
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   */
  fitSync(X, maxIter = 1024, stopThreshold = 1e-6) {
    this._initialValue = X.slice(-this._d - this._p, -this._p);
    var series = np.diff(X, this._d);

    var {
      labels,
      lags,
      residuals
    }

    = this._fitInit(series);
    var costOld = 0;
    var n = residuals.length;
    n = n ? n : lags.length;
    const ones = np.ones([lags.length, 1]);

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var features = np.hstack([ones.slice(0, n),
        lags.slice(0, n),
        residuals
      ]);

      var {
        costCurrent,
        gradient
      }

      = super._runEpoch(features, labels.slice(0, n));
      features = np.hstack([ones, lags]);
      var arW = this._W.slice(0, this._p + 1);
      residuals = labels.sub(np.dot(features, arW));
      residuals = this._buildPredictors(residuals, this._q);

      if (super._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }

    if (this._q) {
      this._residuals = residuals[0].slice(-this._q);
    }
  }

  /**
   *
   * @param {Array|NDArray} X
   * @returns
   */
  _fitInit(X) {
    let lags = this._buildPredictors(X, this._p);
    var labels = X.slice(this._p);
    this._W = np.zeros([this._p + this._q + 1, 1]);
    this._b = (this._b) ? this._b : labels.length;
    var residuals = this._buildPredictors(labels, this._q);
    this._lags = labels.slice(-this._p);
    labels = np.reshape(labels, [-1, 1]);

    return {
      labels,
      lags,
      residuals
    }

    ;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, maxIter = 1024, stopThreshold = 1e-6) {
    this.fitSync(X, maxIter, stopThreshold);
    return this;
  }

  /**
   *
   * @param {number} periods
   * @returns
   */


  forecastSync(periods) {
    let lags = this._lags.slice();
    var residuals = [];

    if (this._residuals) {
      residuals = this._residuals.slice();
    }

    for (let i = 0; i &lt; periods; i++) {
      var X = lags.slice(-this._p);
      X.push(...residuals.slice(-this._q));
      X.unshift(1);
      X = np.reshape(X, [1, -1]);
      var y = super.evaluate(X).flatten();
      lags.push(...y);

      if (residuals.length) {
        residuals.push(np.mean(residuals));
      }
    }

    // the Integration step
    // https://stackoverflow.com/questions/43563241/numpy-diff-inverted-operation
    for (let d = this._d - 1; d &gt;= 0; d--) {
      lags.unshift(this._initialValue[d]);
      lags = np.cumsum(lags);
    }

    return lags.slice(-periods);
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  async forecast(periods) {
    return this.forecastSync(periods);
  }

  updateSync(trueLags) {
    // TODO not implemented yet
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  async update(trueLags) {
    return this.updateSync(trueLags);
  }
}


function extractIdxTensor1D(listOfObjects) {
  var res = [];
  var idx = [];

  for (let i = 0; i &lt; listOfObjects.length; i++) {
    let obj = listOfObjects[i];

    for (const key in obj) {
      if (key === &quot;TimeStamp&quot;) {
        idx.push(obj[key]);
      } else {
        res.push(obj[key]);
      }
    }
  }

  // 	res = tf.tensor1d(res);
  return [idx, res];
}


const query = &quot;SELECT  `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` desc&quot;;

let datalistlenght = 0;
// TODO train

SearchInAsync(query).then((res) =&gt; {

    res = JSON.parse(res.responseText);
    [idx, val] = extractIdxTensor1D(res);



    var p = parseInt(GetPluginParameterValue(&apos;p_value&apos;, &apos;Selected item&apos;));
    var d = parseInt(GetPluginParameterValue(&apos;d_value&apos;, &apos;Selected item&apos;));
    var q = parseInt(GetPluginParameterValue(&apos;q_value&apos;, &apos;Selected item&apos;));

    mod = new AutoRegressionIntegratedMovingAverage(p, d, q);
    return mod.fit(np.array(val), 8);

  }

).then(res =&gt; {
    DataListgetAsync(&apos;class_room_Adel_10&apos;).then(results =&gt; {
      datalistlenght = results[&apos;result&apos;].length;

      if (datalistlenght == 0) {
        DataListAddAsync(&apos;class_room_Adel_10&apos;, JSON.stringify(mod))

        SetPluginParameterValue(&apos;Train&apos;, &apos;Caption&apos;, &apos;Trained&apos;);
        SetPluginParameterValue(&apos;Flag&apos;, &apos;Color&apos;, &apos;green&apos;);
        DrawPlugin(&apos;Train&apos;);
        DrawPlugin(&apos;Flag&apos;);
      } else {
        DataListupdateAsync(&apos;class_room_Adel_10&apos;, JSON.stringify(mod), 0)
      }
      SetPluginParameterValue(&apos;Predict&apos;, &apos;Visible&apos;, 1);
      DrawPlugin(&apos;Predict&apos;);
      SetPluginParameterValue(&apos;Clear&apos;, &apos;Visible&apos;, 1);
      DrawPlugin(&apos;Clear&apos;);
    }).then(event.end);

  }

).then(event.end).catch((err) =&gt; {
    // event.error(err);
  }

);</Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Border Rounded</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >transparent</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Caption' ><Name type='singleValue' >Caption</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Train</Value><DisplayName type='singleValue' >Caption </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ButtonStyle' ><Name type='singleValue' >ButtonStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>default</element><element>primary</element><element>success</element><element>info</element><element>warning</element><element>danger</element></Value><DisplayName type='singleValue' >Button style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >success</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courrier New</element><element>Times New Roman</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >14</Value><DisplayName type='singleValue' >Font Size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font Style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font Weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Font Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#248aaf</Value><DisplayName type='singleValue' >Background Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DisabledButton' ><Name type='singleValue' >DisabledButton</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Disabled Button</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ButtonPlugin' PageSource='undefined'><location><x>1011</x><y>161</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ButtonPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Test</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1011</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >161</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >163</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >33</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' >function DataListAddAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const dataListObj = {
        name: name,
        value: value,
        insertAt: &quot;tail&quot;
      }

      ;
      DataList.add(dataListObj, dataListCallBack);

      function dataListCallBack(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}


function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
      // SearchIn(query, searchIn_callback);
      ExecuteQueryModified(query, searchIn_callback, &apos;&apos;);

      function searchIn_callback(err, result) {
        if (err) {
          return reject(err);
        }

        // write your code here
        resolve(result);
      }
    }

  );
}

/**
 * naive compare array
 * https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730
 *
 * @param {Array} other
 * @returns
 */
Array.prototype.equalsTo = function(other) {
  return JSON.stringify(this) == JSON.stringify(other);
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 * @param {Array} arr
 * @param {number} depth
 * @returns
 */
function flat(arr, depth = 1) {
  return depth &gt; 0 ? arr.reduce((acc, val) =&gt; acc.concat(Array.isArray(val) ? flat(val, depth - 1) : val), []) :
    arr.slice();
}

/**
 *
 * @param {number} depth
 * @returns
 */
Array.prototype.flat = function(depth = 1) {
  return flat(this, depth);
}

class NDArray extends Array {

  /**
   * https://stackoverflow.com/questions/7135874/element-wise-operations-in-javascript
   * @param {NDArray|number} other
   * @param {callbackfn} op
   * @returns
   */
  iOperation(other, op) {
    let sThis = shape(this);

    if (typeof(other) === &quot;number&quot;) {
      return reshape(this.flatten().map(el =&gt; op(el, other)),
        sThis);
    }

    other = array(other);
    let sOther = shape(other);

    if (sThis.equalsTo(sOther)) {
      other = other.flatten();
      return reshape(this.flatten().map((el, i) =&gt; op(el, other[i])),
        sThis);
    } else {
      // TODO handling broadcasting
      sThis = resultantShape(sThis, sOther);
      other = broadcast(other, sThis).flatten();
    }

    return reshape(broadcast(this, sThis).flatten().map((el, i) =&gt; op(el, other[i])),
      sThis);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  add(other) {
    return this.iOperation(other, (a, b) =&gt; a + b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  mul(other) {
    return this.iOperation(other, (a, b) =&gt; a * b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  sub(other) {
    return this.iOperation(other, (a, b) =&gt; a - b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  div(other) {
    return this.iOperation(other, (a, b) =&gt; a / b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  equals(other) {
    return this.iOperation(other, (a, b) =&gt; a == b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  power(other) {
    return this.iOperation(other, (a, b) =&gt; a ** b);
  }

  /**
   *
   * @returns
   */
  flatten() {
    // FIXME not supported on MoT
    return this.flat(ndim(this) - 1);
  }

}

/**
 * a: array-like or iterable
 * @param {Array} a
 * @returns
 */
function array(a) {
  return NDArray.from(a);
}

/**
 *
 * @param {number|NDArray} size
 * @returns
 */
function empty(size) {
  if (typeof(size) === &quot;number&quot;) {
    return new NDArray(size);
  }

  if (size instanceof Array) {
    let p = 1;
    p = size.flat(size.length - 1).reduce((p, el) =&gt; p * el);
    return reshape(Array(p), size);
  }
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function zeros(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(0),
    size);
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function ones(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(1),
    size);
}

/**
 *
 * @param {NDArray} vector
 * @param {number} k
 * @returns
 */
function diag(vector, k = 0) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  let res = [];

  switch (ndim(vector)) {
    case 1:
      res = vector.length + Math.abs(k);
      res = Array(2).fill(res);
      res = zeros(res);

      for (let i = Math.max(0, -k), j = Math.max(0, k), l = 0; l &lt; vector.length; i++, j++, l++) {
        res[i][j] = vector[l];
      }

      return res;
    case 2:
      let lim = Math.min(...shape(vector));
      res = empty(lim);

      for (let i = 0; i &lt; lim; i++) {
        res[i] = vector[i][i];
      }

      return res;
    default:
      throw Error(&quot;Array must be 1D or 2D&quot;);
  }
}

/**
 * create an identity matrix
 * @param {number} size
 * @returns
 */
function eye(size) {
  return diag(ones(size));
}

/**
 * returns vector[i+1] - vector[i]
 * @param {NDArray} vector
 * @param {number} order
 * @returns
 */
function diff(vector, order = 1) {
  if (order == 0) {
    return vector;
  }

  let self = array(vector);

  for (let d = 0; d &lt; order; d++) {
    let other = self.slice(0, -1);
    self = self.slice(1);
    self = self.map((s, idx) =&gt; s - other[idx]);
  }

  return self;
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function cumsum(vector) {
  var total = 0;
  return vector.map((el) =&gt; total += el);
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function mean(vector) {
  return sum(array(vector)) / vector.length;
}

/**
 * number of dimensions of the array
 * @param {Array|NDArray} vector
 * @returns
 */
function ndim(vector) {
  let dim = 0;
  let self = [...vector];

  for (dim = 0; self instanceof Array; dim++) {
    self = self[0]; // FIXME array elements are not required to be the same here
  }

  return dim;
}

/**
 * FIXME transposing only 2D
 * https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript
 * @param {NDArray} vector
 * @returns
 */
function transpose(vector) {
  const dim = ndim(vector);

  if (dim == 1) {
    return vector;
  }

  if (dim == 2) {
    // return vector[0].map((_, j) =&gt;
    // 	vector.map((row) =&gt; row[j])
    // );
    return array(vector[0].map((_, j) =&gt; [...vector].map((row) =&gt; row[j])));
  }
}

/**
 * https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array
 * @param {Array|NDArray} vector
 * @returns
 */
function shape(vector) {
  let self = [...vector];
  const n = ndim(vector);

  let shape = [vector.length]
  for (let dim = 1; dim &lt; n; dim++) {
    shape.push(self[0].length);
    self = self[0];
  }

  return shape;
}

/**
 * reshapes the array into the given shape, if possible
 * @param {Array|NDArray} vector
 * @param {Array} size
 * @returns
 */
function reshape(vector, size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size];
  }

  if (size.map(el =&gt; el == -1).reduce((tot, el) =&gt; tot + el) &gt; 1) {
    throw Error(&quot;Cannot infer more than one dimension&quot;);
  }

  let tSize = 1;
  tSize = shape(vector).reduce((tSize, el) =&gt; tSize * el);
  let oSize = 1;
  oSize = size.reduce((oSize, el) =&gt; oSize * el);

  if (oSize &lt; 0) {
    switch (tSize % oSize) {
      case 0:
        let index = size.indexOf(-1);
        size[index] = -tSize / oSize;
        break;
      default:
        throw Error(&quot;Unable to infer missing dimension&quot;);
    }
  } else if (tSize != oSize) {
    throw Error(&quot;Incompatible shapes&quot;);
  }

  // vector = array(vector).flatten();
  vector = array(vector).flatten();
  // FIXME keeping the largest array as ndarray, &amp; internal arrays
  // as normal arrays
  vector = [...vector];
  let result = [];
  size = size.reverse();

  for (let idx = 0; idx &lt; size.length - 1; idx++) {
    let step = size[idx];

    for (let i = 0; i &lt; vector.length; i += step) {
      result.push(vector.slice(i, i + step));
    }

    vector = result;
    result = [];
  }

  // FIXME had to restore the original order for size
  size = size.reverse();
  return array(vector);
}

/**
 * TODO continue if needed
 * https://numpy.org/doc/stable/reference/generated/numpy.sum.html
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
 * @param {NDArray} vector
 * @param {number} axis
 * @param {number} initialValue
 * @returns
 */
function sum(vector, axis = null, initialValue = 0) {
  if ((ndim(vector) == 1) || axis === null) {
    // full array or 1D array
    return vector.flatten().reduce(((sum, el) =&gt; sum + el),
      initialValue);
  }

  // FIXME to avoid breaking
  return vector;
  // if ((axis &lt; 0) &amp;&amp; (-axis &lt;= this.length)) {
  // 	axis = this.length - axis
  // }
}

/**
 * FIXME implement higher dimensions
 * @param {NDArray} a
 * @param {NDArray} b
 * @returns
 */
function dot(a, b) {
  const shapeA = shape(a);
  const shapeB = shape(b);

  if (shapeA[shapeA.length - 1] != shapeB[0]) {
    throw Error(&quot;Internal dimension mismatch&quot;);
  }

  // vector dot product
  if ((ndim(a) == 1) &amp;&amp; (ndim(b) == 1)) {
    return sum(a.mul(b));
  }

  if (ndim(a) == 1) {
    a = transpose([a]);
  }

  if (ndim(b) == 1) {
    b = transpose([b]);
  }

  // FIXME 2D operation only
  b = transpose(b);
  return a.map(row =&gt; b.map(col =&gt; sum(array(row).mul(col))));
}

/**
 * check if given shapes allow for broadcasting
 * @param {Array} a
 * @param {Array} b
 * @returns
 */
function canBroadcast(a, b) {
  let [i,
    j
  ] = [Array.from(a).reverse(),
    Array.from(b).reverse()
  ];
  [i,
    j
  ] = (i.length &gt;= j.length) ? [i,
    j
  ] : [j, i];
  var res = true;
  j.map((el, idx) =&gt; res &amp;= (el == i[idx]) | (el == 1) | (i[idx] == 1));
  return res;
}

/**
 *
 * @param {Array} size0
 * @param {Array} size1
 * @returns
 */
function resultantShape(size0, size1) {
  matchDimensions(size0, size1);
  return size0.map((el, i) =&gt; Math.max(el, size1[i]));
}

/**
 *
 * @param {Array} a
 * @param {Array} b
 */
function matchDimensions(a, b) {
  var size = a.length - b.length;

  if (size &lt; 0) {
    a.unshift(...ones(-size));
  } else if (size &gt; 0) {
    b.unshift(...ones(size));
  }
}

/**
 * https://numpy.org/doc/stable/user/basics.broadcasting.html
 * @param {NDArray} vector
 * @param {Array} size
 * @returns
 */
function broadcast(vector, size) {
  let vSize = shape(vector);

  if (!canBroadcast(vSize, size)) {
    throw Error(&quot;Can not broadcast&quot;);
  }

  matchDimensions(vSize, size);
  vector = vector.flatten();
  var tempSize = [];

  for (let i = size.length - 1; i &gt;= 0; i--) {
    if (vSize[i] == size[i]) {
      tempSize.shift();
      tempSize.unshift(-1, size[i]);
      vector = reshape(vector, tempSize);
    } else {
      vector = vector.map(el =&gt; new NDArray(size[i]).fill(el));
      tempSize = shape(vector);
    }
  }

  return reshape(vector, size);
}

/**
 * https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
 * @param {number} start
 * @param {number} end
 * @param {number} step
 * @returns
 */
function arange(start, end, step) {
  if (end === undefined) {
    end = start;
    start = 0;
  }

  step = (step === undefined) ? 1 : step;

  if ((end &lt; start) &amp;&amp; (step &gt; 0)) {
    return [];
  }

  [start,
    end
  ] = (start &lt; end) ? [start,
    end
  ] : [end,
    start
  ];
  let res = array(Array(end).keys()).slice(start).filter(el =&gt; !((el - start) % step));
  return (step &gt;= 0) ? res : res.reverse();
}


/**
 *
 * @param {number} start
 * @param {number} stop
 * @param {number} num
 * @returns
 */
function linspace(start, stop, num = 50) {
  let step = (stop - start) / (num - 1);
  let res = [];

  for (let element = start; element &lt; stop; element += step) {
    // https://stackoverflow.com/questions/2221167/javascript-formatting-a-rounded-number-to-n-decimals
    res.push(parseFloat(element.toFixed(8)));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function vstack(elements) {
  let res = [];
  let size = shape(elements[0]);

  if (size.length == 1) {
    elements.forEach(el =&gt; res.push(el));
  } else {
    elements.forEach(el =&gt; res.push(...el));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function hstack(elements) {
  // FIXME edge case
  var res;

  if (ndim(elements[0]) == 1) {
    res = [];

    elements.forEach(el =&gt; {
        res.push(...el)
      }

    );
    return array(res);
  }

  res = elements.map(el =&gt; transpose(el));
  return transpose(vstack(res));
}

const linalg = {

  /**
   *
   * @param {NDArray} vector
   * @param {number} ord
   * @returns
   */
  norm: function(vector, ord = 2) {

    // FIXME edge cases
    if (ord === Infinity) {} else if (ord === -Infinity) {} else if (ord == 0) {}

    return sum(vector.power(ord)) ** 1 / ord
  }
}

const random = {

  /**
   *
   * @param {Array} size
   * @returns
   */
  random: function(size) {
    return reshape(empty(size).flatten().map(_ =&gt; Math.random()),
      size);
  }
}

np = {
  array,
  empty,
  diff,
  dot,
  ndim,
  reshape,
  shape,
  sum,
  transpose,
  diag,
  ones,
  zeros,
  eye,
  arange,
  vstack,
  hstack,
  NDArray,
  linalg,
  linspace,
  random,
  cumsum,
  mean
}

class GradientDescent {

  /**
   *
   * @param {number} learningRate
   * @param {object} kwargs
   */
  constructor(learningRate = 0.001, kwargs = {}

  ) {
    this._alpha = learningRate;
    this._W = kwargs[&quot;weights&quot;];
    this._gamma = kwargs[&quot;momentum&quot;] | 0;
    this._b = kwargs[&quot;batchSize&quot;];
    this._costFn = kwargs[&quot;costFunction&quot;];

    if (!this._costFn) {
      this._costFn = function(labels, predictions, m = null) {
        m = 2 * ((m) ? m : labels.length);
        return np.sum(labels.sub(predictions).power(2)) / m;
      }

      ;
    }

    // FIXME gradient is d[cost]/d_W, so it should be different for each cost function
    this._grad = kwargs[&quot;gradient&quot;];

    if (!this._grad) {
      this._grad = function(X, y, yHat) {
        var error = yHat.sub(y);
        return np.dot(np.transpose(X), error);
      }
    }

    // TODO nesterov update
    this._update = (kwargs[&quot;nesterov&quot;]) ? this.updateNesterov : function(gradient, m, vt1 = 0) {
      this._W = this._W.sub(this.vt(gradient, m, vt1));
    }

    ;
  }

  set alpha(learningRate) {
    this._alpha = learningRate;
  }

  get alpha() {
    return this._alpha;
  }

  set gamma(momentum) {
    this._gamma = momentum;
  }

  get gamma() {
    return this._gamma;
  }

  get _coef() {
    return this._W;
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  evaluate(X) {
    return np.dot(X, this._W);
  }

  updateNesterov(X, y, m, vt1) {
    // TODO implement nesterov&apos;s update
    throw Error(&quot;Method not implemented yet&quot;)
  }

  vt(gradient, m, vt1 = 0) {
    return gradient.mul(this._alpha).div(m).add(this._gamma * vt1);
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  async predict(X) {
    var features = X.slice();

    if (np.ndim(features) == 1) {
      features = np.reshape(features, [-1, 1]);
    }

    features = [np.ones([features.length, 1]),
      features
    ];
    features = np.hstack(features);
    return this.evaluate(features);
  }

  fitSync(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // let ut = 0 // TODO support adaptive grad
    var costOld;

    ({
        costOld,
        y,
        X
      }

      = this._fitInit(X, y));

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var {
        costCurrent,
        gradient
      }

      = this._runEpoch(X, y);

      if (this._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
  }

  _runEpoch(X, y) {
    var end,
      batchX,
      batchY,
      batchPreds,
      batchGrad;

    for (let start = 0; start &lt; y.length; start += this._b) {
      end = start + this._b;
      batchX = X.slice(start, end);
      batchY = y.slice(start, end);
      batchPreds = this.evaluate(batchX);
      batchGrad = this._grad(batchX, batchY, batchPreds);
      // TODO add nesterov update
      this._update(batchGrad, (this._b &gt; 1) ? this._b : y.length);
    }

    var costCurrent = this._costFn(batchY, batchPreds, this._b);

    return {
      costCurrent,
      gradient: batchGrad
    }

    ;
  }

  _fitInit(X, y) {
    var nRows = y.length;
    this._b = (this._b) ? this._b : nRows;
    // FIXME
    // var costOld = this._costFn(y.slice(-this._b), np.zeros([this._b]), this._b);
    var costOld = 0;
    X = np.hstack([np.ones([X.length, 1]), X]);
    y = np.reshape(y, [nRows, 1]);

    if (!this._W) {
      this._W = np.random.random([np.shape(X)[1], 1]);
    }

    return {
      costOld,
      y,
      X
    }

    ;
  }

  _converged(costOld, costCurrent, stopThreshold, batchGrad) {
    return !Math.abs(parseInt((costOld - costCurrent) / stopThreshold)) || !parseInt(np.linalg.norm(batchGrad) / stopThreshold);
  }

  /**
   *
   * @param {NDArray} X
   * @param {Array|NDArray} y
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // TODO flag to tell fit is done
    this.fitSync(X, y, maxIter, stopThreshold);
    return this;
  }
}

class AutoRegressionIntegratedMovingAverage extends GradientDescent {

  /**
   *
   * @param {number} p
   * @param {number} d
   * @param {number} q
   * @param {number} learningRate
   * @param {object} KWArgs
   */
  constructor(p, d, q, learningRate = .001, KWArgs = {}

  ) {
    super(learningRate, KWArgs);
    this._p = p;
    this._d = d;
    this._q = q;
  }

  get p() {
    return this._p;
  }

  get q() {
    return this._q;
  }

  get d() {
    return this._d;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} nCols
   * @returns
   */
  _buildPredictors(X, nCols) {
    var predictors = [];

    for (let idx = 1; idx &lt;= nCols; idx++) {
      predictors.push(...X.slice(nCols - idx, -idx));
    }

    return np.reshape(predictors, [-1, nCols]);
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {Array|NDArray} y
   */
  score(X, y) {
    // TODO to be implemented
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  /**
   * FIXME only works with AR variants [AR, ARI, ARIMA]
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   */
  fitSync(X, maxIter = 1024, stopThreshold = 1e-6) {
    this._initialValue = X.slice(-this._d - this._p, -this._p);
    var series = np.diff(X, this._d);

    var {
      labels,
      lags,
      residuals
    }

    = this._fitInit(series);
    var costOld = 0;
    var n = residuals.length;
    n = n ? n : lags.length;
    const ones = np.ones([lags.length, 1]);

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var features = np.hstack([ones.slice(0, n),
        lags.slice(0, n),
        residuals
      ]);

      var {
        costCurrent,
        gradient
      }

      = super._runEpoch(features, labels.slice(0, n));
      features = np.hstack([ones, lags]);
      var arW = this._W.slice(0, this._p + 1);
      residuals = labels.sub(np.dot(features, arW));
      residuals = this._buildPredictors(residuals, this._q);

      if (super._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }

    if (this._q) {
      this._residuals = residuals[0].slice(-this._q);
    }
  }

  /**
   *
   * @param {Array|NDArray} X
   * @returns
   */
  _fitInit(X) {
    let lags = this._buildPredictors(X, this._p);
    var labels = X.slice(this._p);
    this._W = np.zeros([this._p + this._q + 1, 1]);
    this._b = (this._b) ? this._b : labels.length;
    var residuals = this._buildPredictors(labels, this._q);
    this._lags = labels.slice(-this._p);
    labels = np.reshape(labels, [-1, 1]);

    return {
      labels,
      lags,
      residuals
    }

    ;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, maxIter = 1024, stopThreshold = 1e-6) {
    this.fitSync(X, maxIter, stopThreshold);
    return this;
  }

  /**
   *
   * @param {number} periods
   * @returns
   */


  forecastSync(periods) {
    let lags = this._lags.slice();
    var residuals = [];

    if (this._residuals) {
      residuals = this._residuals.slice();
    }

    for (let i = 0; i &lt; periods; i++) {
      var X = lags.slice(-this._p);
      X.push(...residuals.slice(-this._q));
      X.unshift(1);
      X = np.reshape(X, [1, -1]);
      var y = super.evaluate(X).flatten();
      lags.push(...y);

      if (residuals.length) {
        residuals.push(np.mean(residuals));
      }
    }

    // the Integration step
    // https://stackoverflow.com/questions/43563241/numpy-diff-inverted-operation
    for (let d = this._d - 1; d &gt;= 0; d--) {
      lags.unshift(this._initialValue[d]);
      lags = np.cumsum(lags);
    }

    return lags.slice(-periods);
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  async forecast(periods) {
    return this.forecastSync(periods);
  }

  updateSync(trueLags) {
    // TODO not implemented yet
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  async update(trueLags) {
    return this.updateSync(trueLags);
  }
}

// x = np.linspace(0, 20);
// mod = new AutoRegressionIntegratedMovingAverage(1, 1, 1);
// mod.fit(x.slice(0, -2), 256).then(res =&gt; {
//   return res.forecast(2);
// }).then((pred) =&gt; {
//   console.log(pred);
//   console.log(x.slice(-2));
//   event.end();
// });
// read2 = getSenorRead2()
// switch (read2) {
//   case &quot;train&quot;:
//     break;
//   case &quot;predict&quot;:
//     break;
//   default:
//     event.end();
// }

function extractIdxTensor1D(listOfObjects) {
  var res = [];
  var idx = [];

  for (let i = 0; i &lt; listOfObjects.length; i++) {
    let obj = listOfObjects[i];

    for (const key in obj) {
      if (key === &quot;TimeStamp&quot;) {
        idx.push(obj[key]);
      } else {
        res.push(obj[key]);
      }
    }
  }

  // 	res = tf.tensor1d(res);
  return [idx, res];
}

function mse(a, b) {
  let error = 0
  for (let i = 0; i &lt; a.length; i++) {
    error += Math.pow((b[i] - a[i]), 2)
  }
  console.log(a.length)
  console.log(error)
  return error / a.length
}


let y = []
let y_hat = []
const query = &quot;SELECT  `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` desc&quot;;

// TODO train

SearchInAsync(query).then((res) =&gt; {
    res = JSON.parse(res.responseText);
    [idx, val] = extractIdxTensor1D(res);
    trainSize = parseInt(0.9 * val.length);
    xTrain = val.slice(0, trainSize);
    y = val.slice(-1 * (y.length - trainSize));


    var p = parseInt(GetPluginParameterValue(&apos;p_value&apos;, &apos;Selected item&apos;));
    var d = parseInt(GetPluginParameterValue(&apos;d_value&apos;, &apos;Selected item&apos;));
    var q = parseInt(GetPluginParameterValue(&apos;q_value&apos;, &apos;Selected item&apos;));

    mod = new AutoRegressionIntegratedMovingAverage(p, d, q);
    mod.fit(xTrain, 8000);
    y_hat = mod.forecastSync(y.length)

    y_hat.forEach(function(item, index) {
      y_hat[index] = parseFloat(item);
    });

    accuracy = mse(y_hat, y)

    SetPluginParameterValue(&apos;MSE&apos;, &apos;Reading&apos;, accuracy);
    DrawPlugin(&apos;MSE&apos;);

  }

).then(event.end).catch((err) =&gt; {}

);

SetPluginParameterValue(&apos;LineChart 1&apos;, &apos;Data Source&apos;, y_hat);
DrawPlugin(&apos;LineChart 1&apos;);
SetPluginParameterValue(&apos;Train&apos;, &apos;Background Color&apos;, &apos;primary&apos;);
DrawPlugin(&apos;Test&apos;);</Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Border Rounded</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Caption' ><Name type='singleValue' >Caption</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Test</Value><DisplayName type='singleValue' >Caption </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ButtonStyle' ><Name type='singleValue' >ButtonStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>default</element><element>primary</element><element>success</element><element>info</element><element>warning</element><element>danger</element></Value><DisplayName type='singleValue' >Button style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >primary</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courrier New</element><element>Times New Roman</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >14</Value><DisplayName type='singleValue' >Font Size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font Style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font Weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Font Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Background Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DisabledButton' ><Name type='singleValue' >DisabledButton</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Disabled Button</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ButtonPlugin' PageSource='undefined'><location><x>1011</x><y>117</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ButtonPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Predict</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1011</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >117</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >162</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >35</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' >function DataListAddAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const dataListObj = {
        name: name,
        value: value,
        insertAt: &quot;tail&quot;
      }

      ;
      DataList.add(dataListObj, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListRemoveAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value,
        &quot;count&quot;: &quot;0&quot;
      };

      DataList.remove(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListgetAsync(name) {
  return new Promise((resolve, reject) =&gt; {
    const dataListObj = {
      name: name
    }
    DataList.get(dataListObj, dataListCallBack);

    function dataListCallBack(err, res) {
      if (err) {
        return reject(err);
      }
      resolve(res)
    }
  });
}

function DataListupdateAsync(name, value, index) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value, // updated value
        &quot;index&quot;: index // updated index
      };

      DataList.update(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
    SearchIn(query, searchIn_callback);

    function searchIn_callback(err, result) {
      if (err) {
        return reject(err);
      }

      // write your code here
      resolve(result);
    }
  });
}

/**
 * naive compare array
 * https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730
 *
 * @param {Array} other
 * @returns
 */
Array.prototype.equalsTo = function(other) {
  return JSON.stringify(this) == JSON.stringify(other);
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 * @param {Array} arr
 * @param {number} depth
 * @returns
 */
function flat(arr, depth = 1) {
  return depth &gt; 0 ? arr.reduce((acc, val) =&gt;
      acc.concat(Array.isArray(val) ? flat(val, depth - 1) :
        val), []) :
    arr.slice();
}

/**
 *
 * @param {number} depth
 * @returns
 */
Array.prototype.flat = function(depth = 1) {
  return flat(this, depth);
}

class NDArray extends Array {
  /**
   * https://stackoverflow.com/questions/7135874/element-wise-operations-in-javascript
   * @param {NDArray|number} other
   * @param {callbackfn} op
   * @returns
   */
  iOperation(other, op) {
    let sThis = shape(this);
    if (typeof(other) === &quot;number&quot;) {
      return reshape(
        this.flatten()
        .map(el =&gt;
          op(el, other)
        ),
        sThis
      );
    }
    other = array(other);
    let sOther = shape(other);
    if (sThis.equalsTo(sOther)) {
      other = other.flatten();
      return reshape(
        this.flatten()
        .map((el, i) =&gt;
          op(el, other[i])
        ),
        sThis
      );
    } else {
      // TODO handling broadcasting
      sThis = resultantShape(sThis, sOther);
      other = broadcast(other, sThis).flatten();
    }
    return reshape(
      broadcast(this, sThis).flatten()
      .map((el, i) =&gt;
        op(el, other[i])
      ),
      sThis);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  add(other) {
    return this.iOperation(other, (a, b) =&gt; a + b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  mul(other) {
    return this.iOperation(other, (a, b) =&gt; a * b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  sub(other) {
    return this.iOperation(other, (a, b) =&gt; a - b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  div(other) {
    return this.iOperation(other, (a, b) =&gt; a / b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  equals(other) {
    return this.iOperation(other, (a, b) =&gt; a == b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  power(other) {
    return this.iOperation(other, (a, b) =&gt; a ** b);
  }

  /**
   *
   * @returns
   */
  flatten() {
    // FIXME not supported on MoT
    return this.flat(ndim(this) - 1);
  }

}

/**
 * a: array-like or iterable
 * @param {Array} a
 * @returns
 */
function array(a) {
  return NDArray.from(a);
}

/**
 *
 * @param {number|NDArray} size
 * @returns
 */
function empty(size) {
  if (typeof(size) === &quot;number&quot;) {
    return new NDArray(size);
  }
  if (size instanceof Array) {
    let p = 1;
    p = size.flat(size.length - 1)
      .reduce((p, el) =&gt;
        p * el
      );
    return reshape(Array(p), size);
  }
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function zeros(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }
  return reshape(
    empty(size)
    .flatten()
    .fill(0),
    size);
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function ones(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }
  return reshape(
    empty(size)
    .flatten()
    .fill(1),
    size);
}

/**
 *
 * @param {NDArray} vector
 * @param {number} k
 * @returns
 */
function diag(vector, k = 0) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  let res = [];
  switch (ndim(vector)) {
    case 1:
      res = vector.length + Math.abs(k);
      res = Array(2).fill(res);
      res = zeros(res);
      for (let i = Math.max(0, -k), j = Math.max(0, k), l = 0; l &lt; vector.length; i++, j++, l++) {
        res[i][j] = vector[l];
      }
      return res;
    case 2:
      let lim = Math.min(...shape(vector));
      res = empty(lim);
      for (let i = 0; i &lt; lim; i++) {
        res[i] = vector[i][i];
      }
      return res;
    default:
      throw Error(&quot;Array must be 1D or 2D&quot;);
  }
}

/**
 * create an identity matrix
 * @param {number} size
 * @returns
 */
function eye(size) {
  return diag(ones(size));
}

/**
 * returns vector[i+1] - vector[i]
 * @param {NDArray} vector
 * @param {number} order
 * @returns
 */
function diff(vector, order = 1) {
  if (order == 0) {
    return vector;
  }
  let self = array(vector);
  for (let d = 0; d &lt; order; d++) {
    let other = self.slice(0, -1);
    self = self.slice(1);
    self = self.map((s, idx) =&gt;
      s - other[idx]
    );
  }
  return self;
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function cumsum(vector) {
  var total = 0;
  return vector.map((el) =&gt; total += el);
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function mean(vector) {
  return sum(array(vector)) / vector.length;
}

/**
 * number of dimensions of the array
 * @param {Array|NDArray} vector
 * @returns
 */
function ndim(vector) {
  let dim = 0;
  let self = [...vector];
  for (dim = 0; self instanceof Array; dim++) {
    self = self[0]; // FIXME array elements are not required to be the same here
  }
  return dim;
}

/**
 * FIXME transposing only 2D
 * https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript
 * @param {NDArray} vector
 * @returns
 */
function transpose(vector) {
  const dim = ndim(vector);
  if (dim == 1) {
    return vector;
  }
  if (dim == 2) {
    // return vector[0].map((_, j) =&gt;
    // 	vector.map((row) =&gt; row[j])
    // );
    return array(vector[0].map((_, j) =&gt; [...vector].map((row) =&gt; row[j])));
  }
}

/**
 * https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array
 * @param {Array|NDArray} vector
 * @returns
 */
function shape(vector) {
  let self = [...vector];
  const n = ndim(vector);
  let shape = [vector.length]
  for (let dim = 1; dim &lt; n; dim++) {
    shape.push(self[0].length);
    self = self[0];
  }
  return shape;
}

/**
 * reshapes the array into the given shape, if possible
 * @param {Array|NDArray} vector
 * @param {Array} size
 * @returns
 */
function reshape(vector, size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size];
  }
  if (size.map(el =&gt;
      el == -1
    ).reduce((tot, el) =&gt;
      tot + el
    ) &gt; 1) {
    throw Error(&quot;Cannot infer more than one dimension&quot;);
  }
  let tSize = 1;
  tSize = shape(vector)
    .reduce((tSize, el) =&gt;
      tSize * el
    );
  let oSize = 1;
  oSize = size.reduce((oSize, el) =&gt;
    oSize * el
  );
  if (oSize &lt; 0) {
    switch (tSize % oSize) {
      case 0:
        let index = size.indexOf(-1);
        size[index] = -tSize / oSize;
        break;
      default:
        throw Error(&quot;Unable to infer missing dimension&quot;);
    }
  } else if (tSize != oSize) {
    throw Error(&quot;Incompatible shapes&quot;);
  }
  // vector = array(vector).flatten();
  vector = array(vector).flatten();
  // FIXME keeping the largest array as ndarray, &amp; internal arrays
  // as normal arrays
  vector = [...vector];
  let result = [];
  size = size.reverse();
  for (let idx = 0; idx &lt; size.length - 1; idx++) {
    let step = size[idx];
    for (let i = 0; i &lt; vector.length; i += step) {
      result.push(vector.slice(i, i + step));
    }
    vector = result;
    result = [];
  }
  // FIXME had to restore the original order for size
  size = size.reverse();
  return array(vector);
}

/**
 * TODO continue if needed
 * https://numpy.org/doc/stable/reference/generated/numpy.sum.html
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
 * @param {NDArray} vector
 * @param {number} axis
 * @param {number} initialValue
 * @returns
 */
function sum(vector, axis = null, initialValue = 0) {
  if ((ndim(vector) == 1) || axis === null) {
    // full array or 1D array
    return vector.flatten()
      .reduce(((sum, el) =&gt;
          sum + el
        ),
        initialValue);
  }
  // FIXME to avoid breaking
  return vector;
  // if ((axis &lt; 0) &amp;&amp; (-axis &lt;= this.length)) {
  // 	axis = this.length - axis
  // }
}

/**
 * FIXME implement higher dimensions
 * @param {NDArray} a
 * @param {NDArray} b
 * @returns
 */
function dot(a, b) {
  const shapeA = shape(a);
  const shapeB = shape(b);
  if (shapeA[shapeA.length - 1] != shapeB[0]) {
    throw Error(&quot;Internal dimension mismatch&quot;);
  }
  // vector dot product
  if ((ndim(a) == 1) &amp;&amp; (ndim(b) == 1)) {
    return sum(a.mul(b));
  }
  if (ndim(a) == 1) {
    a = transpose([a]);
  }
  if (ndim(b) == 1) {
    b = transpose([b]);
  }
  // FIXME 2D operation only
  b = transpose(b);
  return a.map(row =&gt;
    b.map(col =&gt;
      sum(array(row).mul(col))
    )
  );
}
/**
 * check if given shapes allow for broadcasting
 * @param {Array} a
 * @param {Array} b
 * @returns
 */
function canBroadcast(a, b) {
  let [i, j] = [Array.from(a).reverse(), Array.from(b).reverse()];
  [i, j] = (i.length &gt;= j.length) ? [i, j] : [j, i];
  var res = true;
  j.map((el, idx) =&gt;
    res &amp;= (el == i[idx]) | (el == 1) | (i[idx] == 1)
  );
  return res;
}
/**
 *
 * @param {Array} size0
 * @param {Array} size1
 * @returns
 */
function resultantShape(size0, size1) {
  matchDimensions(size0, size1);
  return size0.map((el, i) =&gt;
    Math.max(el, size1[i])
  );
}

/**
 *
 * @param {Array} a
 * @param {Array} b
 */
function matchDimensions(a, b) {
  var size = a.length - b.length;
  if (size &lt; 0) {
    a.unshift(...ones(-size));
  } else if (size &gt; 0) {
    b.unshift(...ones(size));
  }
}

/**
 * https://numpy.org/doc/stable/user/basics.broadcasting.html
 * @param {NDArray} vector
 * @param {Array} size
 * @returns
 */
function broadcast(vector, size) {
  let vSize = shape(vector);
  if (!canBroadcast(vSize, size)) {
    throw Error(&quot;Can not broadcast&quot;);
  }
  matchDimensions(vSize, size);
  vector = vector.flatten();
  var tempSize = [];
  for (let i = size.length - 1; i &gt;= 0; i--) {
    if (vSize[i] == size[i]) {
      tempSize.shift();
      tempSize.unshift(-1, size[i]);
      vector = reshape(vector, tempSize);
    } else {
      vector = vector.map(el =&gt;
        new NDArray(size[i]).fill(el)
      );
      tempSize = shape(vector);
    }
  }
  return reshape(vector, size);
}

/**
 * https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
 * @param {number} start
 * @param {number} end
 * @param {number} step
 * @returns
 */
function arange(start, end, step) {
  if (end === undefined) {
    end = start;
    start = 0;
  }
  step = (step === undefined) ? 1 : step;
  if ((end &lt; start) &amp;&amp; (step &gt; 0)) {
    return [];
  }
  [start, end] = (start &lt; end) ? [start, end] : [end, start];
  let res = array(Array(end).keys())
    .slice(start)
    .filter(el =&gt;
      !((el - start) % step)
    );
  return (step &gt;= 0) ? res : res.reverse();
}


/**
 *
 * @param {number} start
 * @param {number} stop
 * @param {number} num
 * @returns
 */
function linspace(start, stop, num = 50) {
  let step = (stop - start) / (num - 1);
  let res = [];
  for (let element = start; element &lt; stop; element += step) {
    // https://stackoverflow.com/questions/2221167/javascript-formatting-a-rounded-number-to-n-decimals
    res.push(parseFloat(element.toFixed(8)));
  }
  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function vstack(elements) {
  let res = [];
  let size = shape(elements[0]);
  if (size.length == 1) {
    elements.forEach(el =&gt; res.push(el));
  } else {
    elements.forEach(el =&gt; res.push(...el));
  }
  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function hstack(elements) {
  // FIXME edge case
  var res;
  if (ndim(elements[0]) == 1) {
    res = [];
    elements.forEach(el =&gt; {
      res.push(...el)
    });
    return array(res);
  }
  res = elements.map(el =&gt; transpose(el));
  return transpose(vstack(res));
}

const linalg = {
  /**
   *
   * @param {NDArray} vector
   * @param {number} ord
   * @returns
   */
  norm: function(vector, ord = 2) {
    // FIXME edge cases
    if (ord === Infinity) {

    } else if (ord === -Infinity) {

    } else if (ord == 0) {

    }
    return sum(vector.power(ord)) ** 1 / ord
  }
}

const random = {
  /**
   *
   * @param {Array} size
   * @returns
   */
  random: function(size) {
    return reshape(empty(size).flatten()
      .map(_ =&gt;
        Math.random()
      ),
      size);
  }
}

np = {
  array,
  empty,
  diff,
  dot,
  ndim,
  reshape,
  shape,
  sum,
  transpose,
  diag,
  ones,
  zeros,
  eye,
  arange,
  vstack,
  hstack,
  NDArray,
  linalg,
  linspace,
  random,
  cumsum,
  mean
}

class GradientDescent {
  /**
   *
   * @param {number} learningRate
   * @param {object} kwargs
   */
  constructor(learningRate = 0.001, kwargs = {}) {
    this._alpha = learningRate;
    this._W = kwargs[&quot;weights&quot;];
    this._gamma = kwargs[&quot;momentum&quot;] | 0;
    this._b = kwargs[&quot;batchSize&quot;];
    this._costFn = kwargs[&quot;costFunction&quot;];
    if (!this._costFn) {
      this._costFn = function(labels, predictions, m = null) {
        m = 2 * ((m) ? m : labels.length);
        return np.sum(labels.sub(predictions).power(2)) / m;
      };
    }
    // FIXME gradient is d[cost]/d_W, so it should be different for each cost function
    this._grad = kwargs[&quot;gradient&quot;];
    if (!this._grad) {
      this._grad = function(X, y, yHat) {
        var error = yHat.sub(y);
        return np.dot(np.transpose(X), error);
      }
    }
    // TODO nesterov update
    this._update = (kwargs[&quot;nesterov&quot;]) ? this.updateNesterov : function(gradient, m, vt1 = 0) {
      this._W = this._W.sub(this.vt(gradient, m, vt1));
    };
  }

  set alpha(learningRate) {
    this._alpha = learningRate;
  }

  get alpha() {
    return this._alpha;
  }

  set gamma(momentum) {
    this._gamma = momentum;
  }

  get gamma() {
    return this._gamma;
  }

  get _coef() {
    return this._W;
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  evaluate(X) {
    return np.dot(X, this._W);
  }

  updateNesterov(X, y, m, vt1) {
    // TODO implement nesterov&apos;s update
    throw Error(&quot;Method not implemented yet&quot;)
  }

  vt(gradient, m, vt1 = 0) {
    return gradient.mul(this._alpha)
      .div(m)
      .add(this._gamma * vt1);
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  async predict(X) {
    var features = X.slice();
    if (np.ndim(features) == 1) {
      features = np.reshape(features, [-1, 1]);
    }
    features = [np.ones([features.length, 1]), features];
    features = np.hstack(features);
    return this.evaluate(features);
  }

  fitSync(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // let ut = 0 // TODO support adaptive grad
    var costOld;
    ({
      costOld,
      y,
      X
    } = this._fitInit(X, y));
    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var {
        costCurrent,
        gradient
      } = this._runEpoch(X, y);
      if (this._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
  }

  _runEpoch(X, y) {
    var end, batchX, batchY, batchPreds, batchGrad;
    for (let start = 0; start &lt; y.length; start += this._b) {
      end = start + this._b;
      batchX = X.slice(start, end);
      batchY = y.slice(start, end);
      batchPreds = this.evaluate(batchX);
      batchGrad = this._grad(batchX, batchY, batchPreds);
      // TODO add nesterov update
      this._update(batchGrad, (this._b &gt; 1) ? this._b : y.length);
    }
    var costCurrent = this._costFn(batchY, batchPreds, this._b);
    return {
      costCurrent,
      gradient: batchGrad
    };
  }

  _fitInit(X, y) {
    var nRows = y.length;
    this._b = (this._b) ? this._b : nRows;
    // FIXME
    // var costOld = this._costFn(y.slice(-this._b), np.zeros([this._b]), this._b);
    var costOld = 0;
    X = np.hstack([np.ones([X.length, 1]), X]);
    y = np.reshape(y, [nRows, 1]);
    if (!this._W) {
      this._W = np.random.random([np.shape(X)[1], 1]);
    }
    return {
      costOld,
      y,
      X
    };
  }

  _converged(costOld, costCurrent, stopThreshold, batchGrad) {
    return !Math.abs(parseInt((costOld - costCurrent) / stopThreshold)) ||
      !parseInt(np.linalg.norm(batchGrad) / stopThreshold);
  }

  /**
   *
   * @param {NDArray} X
   * @param {Array|NDArray} y
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // TODO flag to tell fit is done
    this.fitSync(X, y, maxIter, stopThreshold);
    return this;
  }
}

class AutoRegressionIntegratedMovingAverage extends GradientDescent {
  /**
   *
   * @param {number} p
   * @param {number} d
   * @param {number} q
   * @param {number} learningRate
   * @param {object} KWArgs
   */
  constructor(p, d, q, learningRate = .001, KWArgs = {}) {
    super(learningRate, KWArgs);
    this._p = p;
    this._d = d;
    this._q = q;
  }

  get p() {
    return this._p;
  }

  get q() {
    return this._q;
  }

  get d() {
    return this._d;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} nCols
   * @returns
   */
  _buildPredictors(X, nCols) {
    var predictors = [];
    for (let idx = 1; idx &lt;= nCols; idx++) {
      predictors.push(...X.slice(nCols - idx, -idx));
    }
    return np.reshape(predictors, [-1, nCols]);
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {Array|NDArray} y
   */
  score(X, y) {
    // TODO to be implemented
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  /**
   * FIXME only works with AR variants [AR, ARI, ARIMA]
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   */
  fitSync(X, maxIter = 1024, stopThreshold = 1e-6) {
    this._initialValue = X.slice(-this._d - this._p, -this._p);
    var series = np.diff(X, this._d);
    var {
      labels,
      lags,
      residuals
    } = this._fitInit(series);
    var costOld = 0;
    var n = residuals.length;
    n = n ? n : lags.length;
    const ones = np.ones([lags.length, 1]);
    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var features = np.hstack([
        ones.slice(0, n),
        lags.slice(0, n),
        residuals
      ]);
      var {
        costCurrent,
        gradient
      } = super._runEpoch(features, labels.slice(0, n));
      features = np.hstack([ones, lags]);
      var arW = this._W.slice(0, this._p + 1);
      residuals = labels.sub(np.dot(features, arW));
      residuals = this._buildPredictors(residuals, this._q);
      if (super._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
    if (this._q) {
      this._residuals = residuals[0].slice(-this._q);
    }
  }

  /**
   *
   * @param {Array|NDArray} X
   * @returns
   */
  _fitInit(X) {
    let lags = this._buildPredictors(X, this._p);
    var labels = X.slice(this._p);
    this._W = np.zeros([this._p + this._q + 1, 1]);
    this._b = (this._b) ? this._b : labels.length;
    var residuals = this._buildPredictors(labels, this._q);
    this._lags = labels.slice(-this._p);
    labels = np.reshape(labels, [-1, 1]);
    return {
      labels,
      lags,
      residuals
    };
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, maxIter = 1024, stopThreshold = 1e-6) {
    this.fitSync(X, maxIter, stopThreshold);
    return this;
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  forecastSync(periods) {
    let lags = this._lags.slice();
    var residuals = [];
    if (this._residuals) {
      residuals = this._residuals.slice();
    }
    for (let i = 0; i &lt; periods; i++) {
      var X = lags.slice(-this._p);
      X.push(...residuals.slice(-this._q));
      X.unshift(1);
      X = np.reshape(X, [1, -1]);
      var y = super.evaluate(X).flatten();
      lags.push(...y);
      if (residuals.length) {
        residuals.push(np.mean(residuals));
      }
    }
    // the Integration step
    // https://stackoverflow.com/questions/43563241/numpy-diff-inverted-operation
    for (let d = this._d - 1; d &gt;= 0; d--) {
      lags.unshift(this._initialValue[d]);
      lags = np.cumsum(lags);
    }
    return lags.slice(-periods);
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  async forecast(periods) {
    return this.forecastSync(periods);
  }

  updateSync(trueLags) {
    // TODO not implemented yet
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  async update(trueLags) {
    return this.updateSync(trueLags);
  }
}



function extractIdxTensor1D(listOfObjects) {
  var res = [];
  var idx = [];
  for (let i = 0; i &lt; listOfObjects.length; i++) {
    let obj = listOfObjects[i];
    for (const key in obj) {
      if (key === &quot;TimeStamp&quot;) {
        idx.push(obj[key]);
      } else {
        res.push(obj[key]);
      }
    }
  }
  // 	res = tf.tensor1d(res);
  return [idx, res];
}
// TODO predict
DataListgetAsync(&apos;class_room_Adel_10&apos;).then((result) =&gt; {
  model = JSON.parse(result[&quot;result&quot;][0]);

  mod = new AutoRegressionIntegratedMovingAverage();
  mod._initialValue = model._initialValue
  mod._p = model._p
  mod._d = model._d
  mod._q = model._q
  mod._W = model._W
  mod._residuals = model._residuals
  mod._lags = model._lags


  var peridos = parseInt(GetPluginParameterValue(&apos;peridos_value&apos;, &apos;Selected item&apos;));
  return mod.forecast(peridos);
}).then(predictions =&gt; {
  console.log(predictions)
  // TODO use predictions
  predictions.forEach(function(item, index) {
    predictions[index] = parseFloat(item);
  });
  SetPluginParameterValue(&apos;Pred_list&apos;, &apos;List captions&apos;, predictions);
  SetPluginParameterValue(&apos;Pred_list&apos;, &apos;Visible&apos;, 1);
  DrawPlugin(&apos;Pred_list&apos;);
  console.log(predictions)
  event.end();
}).catch(event.error);</Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Border Rounded</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Caption' ><Name type='singleValue' >Caption</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Predict</Value><DisplayName type='singleValue' >Caption </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ButtonStyle' ><Name type='singleValue' >ButtonStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>default</element><element>primary</element><element>success</element><element>info</element><element>warning</element><element>danger</element></Value><DisplayName type='singleValue' >Button style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >primary</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courrier New</element><element>Times New Roman</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >14</Value><DisplayName type='singleValue' >Font Size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font Style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font Weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Font Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Background Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DisabledButton' ><Name type='singleValue' >DisabledButton</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Disabled Button</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ComboBoxPlugin' PageSource='undefined'><location><x>1100</x><y>73</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >{&quot;&quot;:&quot;&quot;}</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ComboBoxPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >d_value</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1100</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >73</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >86</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >34</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SetSelectedItem' ><Name type='singleValue' >SetSelectedItem</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Set Selected Item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ListItem' ><Name type='singleValue' >ListItem</Name><Type type='singleValue' >input</Type><Value type='singleValue' >0,1,2,3,4,5,6,7,8,9</Value><DisplayName type='singleValue' >List captions</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Selected item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlign' ><Name type='singleValue' >TextAlign</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>right</element></Value><DisplayName type='singleValue' >Text alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='OnSelect' ><Name type='singleValue' >OnSelect</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnSelect event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReadingsSeparator' ><Name type='singleValue' >ReadingsSeparator</Name><Type type='singleValue' >input</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Readings Separator</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ComboBoxPlugin' PageSource='undefined'><location><x>1189</x><y>72</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ComboBoxPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >q_value</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1189</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >72</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >86</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >34</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SetSelectedItem' ><Name type='singleValue' >SetSelectedItem</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Set Selected Item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ListItem' ><Name type='singleValue' >ListItem</Name><Type type='singleValue' >input</Type><Value type='singleValue' >0,1,2,3,4,5,6,7,8,9</Value><DisplayName type='singleValue' >List captions</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Selected item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlign' ><Name type='singleValue' >TextAlign</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>right</element></Value><DisplayName type='singleValue' >Text alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='OnSelect' ><Name type='singleValue' >OnSelect</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnSelect event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReadingsSeparator' ><Name type='singleValue' >ReadingsSeparator</Name><Type type='singleValue' >input</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Readings Separator</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ComboBoxPlugin' PageSource='undefined'><location><x>1008</x><y>74</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ComboBoxPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >p_value</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1008</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >74</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >86</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >34</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SetSelectedItem' ><Name type='singleValue' >SetSelectedItem</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Set Selected Item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ListItem' ><Name type='singleValue' >ListItem</Name><Type type='singleValue' >input</Type><Value type='singleValue' >0,1,2,3,4,5,6,7,8,9</Value><DisplayName type='singleValue' >List captions</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Selected item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlign' ><Name type='singleValue' >TextAlign</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>right</element></Value><DisplayName type='singleValue' >Text alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='OnSelect' ><Name type='singleValue' >OnSelect</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnSelect event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReadingsSeparator' ><Name type='singleValue' >ReadingsSeparator</Name><Type type='singleValue' >input</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Readings Separator</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='LabelPlugin' PageSource='undefined'><location><x>1044</x><y>52</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >LabelPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >p</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1044</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >52</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >28</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >30</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LabelValue' ><Name type='singleValue' >LabelValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >p</Value><DisplayName type='singleValue' >Caption</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='MultipleLine' ><Name type='singleValue' >MultipleLine</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple lines</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Scroll' ><Name type='singleValue' >Scroll</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Scroll</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextRotation' ><Name type='singleValue' >TextRotation</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>rotate(0deg)</element><element>rotate(90deg)</element><element>rotate(270deg)</element></Value><DisplayName type='singleValue' >Rotation</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >rotate(0deg)</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>6px</element><element>8px</element><element>10px</element><element>12px</element><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element><element>30px</element><element>32px</element><element>34px</element><element>36px</element><element>38px</element><element>40px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courier New</element><element>Times New Roman</element><element>Galada</element><element>Roboto</element><element>Droid Serif Normal</element><element>Droid Serif Italic</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackGroundColor' ><Name type='singleValue' >BackGroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextDirection' ><Name type='singleValue' >TextDirection</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left To Right</element><element>Right To Left</element></Value><DisplayName type='singleValue' >Text Direction</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left To Right</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlignment' ><Name type='singleValue' >TextAlignment</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left</element><element>Right</element><element>Center</element></Value><DisplayName type='singleValue' >Text Alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='LabelPlugin' PageSource='undefined'><location><x>1136</x><y>53</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >LabelPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >d</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1136</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >53</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LabelValue' ><Name type='singleValue' >LabelValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >d</Value><DisplayName type='singleValue' >Caption</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='MultipleLine' ><Name type='singleValue' >MultipleLine</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple lines</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Scroll' ><Name type='singleValue' >Scroll</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Scroll</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextRotation' ><Name type='singleValue' >TextRotation</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>rotate(0deg)</element><element>rotate(90deg)</element><element>rotate(270deg)</element></Value><DisplayName type='singleValue' >Rotation</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >rotate(0deg)</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>6px</element><element>8px</element><element>10px</element><element>12px</element><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element><element>30px</element><element>32px</element><element>34px</element><element>36px</element><element>38px</element><element>40px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courier New</element><element>Times New Roman</element><element>Galada</element><element>Roboto</element><element>Droid Serif Normal</element><element>Droid Serif Italic</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackGroundColor' ><Name type='singleValue' >BackGroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextDirection' ><Name type='singleValue' >TextDirection</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left To Right</element><element>Right To Left</element></Value><DisplayName type='singleValue' >Text Direction</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left To Right</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlignment' ><Name type='singleValue' >TextAlignment</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left</element><element>Right</element><element>Center</element></Value><DisplayName type='singleValue' >Text Alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='LabelPlugin' PageSource='undefined'><location><x>1224</x><y>49</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >LabelPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >q</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1224</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >49</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >auto</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LabelValue' ><Name type='singleValue' >LabelValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >q</Value><DisplayName type='singleValue' >Caption</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='MultipleLine' ><Name type='singleValue' >MultipleLine</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple lines</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Scroll' ><Name type='singleValue' >Scroll</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Scroll</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextRotation' ><Name type='singleValue' >TextRotation</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>rotate(0deg)</element><element>rotate(90deg)</element><element>rotate(270deg)</element></Value><DisplayName type='singleValue' >Rotation</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >rotate(0deg)</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>6px</element><element>8px</element><element>10px</element><element>12px</element><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element><element>30px</element><element>32px</element><element>34px</element><element>36px</element><element>38px</element><element>40px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courier New</element><element>Times New Roman</element><element>Galada</element><element>Roboto</element><element>Droid Serif Normal</element><element>Droid Serif Italic</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackGroundColor' ><Name type='singleValue' >BackGroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextDirection' ><Name type='singleValue' >TextDirection</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left To Right</element><element>Right To Left</element></Value><DisplayName type='singleValue' >Text Direction</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left To Right</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlignment' ><Name type='singleValue' >TextAlignment</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left</element><element>Right</element><element>Center</element></Value><DisplayName type='singleValue' >Text Alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ComboBoxPlugin' PageSource='undefined'><location><x>1189</x><y>118</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ComboBoxPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >peridos_value</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1189</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >118</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >86</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >34</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SetSelectedItem' ><Name type='singleValue' >SetSelectedItem</Name><Type type='singleValue' >Deprecated</Type><Value type='singleValue' >5</Value><DisplayName type='singleValue' >Set Selected Item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ListItem' ><Name type='singleValue' >ListItem</Name><Type type='singleValue' >input</Type><Value type='singleValue' >0,1,2,3,4,5,6,7,8,9</Value><DisplayName type='singleValue' >List captions</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >5</Value><DisplayName type='singleValue' >Selected item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlign' ><Name type='singleValue' >TextAlign</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>right</element></Value><DisplayName type='singleValue' >Text alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='OnSelect' ><Name type='singleValue' >OnSelect</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnSelect event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReadingsSeparator' ><Name type='singleValue' >ReadingsSeparator</Name><Type type='singleValue' >input</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Readings Separator</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='LabelPlugin' PageSource='undefined'><location><x>31</x><y>104</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >LabelPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Label 5</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >31</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >104</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >177</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >20</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LabelValue' ><Name type='singleValue' >LabelValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >MSE</Value><DisplayName type='singleValue' >Caption</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='MultipleLine' ><Name type='singleValue' >MultipleLine</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple lines</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Scroll' ><Name type='singleValue' >Scroll</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Scroll</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextRotation' ><Name type='singleValue' >TextRotation</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>rotate(0deg)</element><element>rotate(90deg)</element><element>rotate(270deg)</element></Value><DisplayName type='singleValue' >Rotation</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >rotate(0deg)</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>6px</element><element>8px</element><element>10px</element><element>12px</element><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element><element>30px</element><element>32px</element><element>34px</element><element>36px</element><element>38px</element><element>40px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >30px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courier New</element><element>Times New Roman</element><element>Galada</element><element>Roboto</element><element>Droid Serif Normal</element><element>Droid Serif Italic</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >oblique</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#4154e1</Value><DisplayName type='singleValue' >Font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackGroundColor' ><Name type='singleValue' >BackGroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextDirection' ><Name type='singleValue' >TextDirection</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left To Right</element><element>Right To Left</element></Value><DisplayName type='singleValue' >Text Direction</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left To Right</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlignment' ><Name type='singleValue' >TextAlignment</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Left</element><element>Right</element><element>Center</element></Value><DisplayName type='singleValue' >Text Alignment</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ListPlugin' PageSource='undefined'><location><x>43</x><y>628</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ListPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >List w</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >43</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >628</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >150</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >120</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Item2</Value><DisplayName type='singleValue' >Selected item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedIndex' ><Name type='singleValue' >SelectedIndex</Name><Type type='singleValue' >input</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Selected item index</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReadingsSeparator' ><Name type='singleValue' >ReadingsSeparator</Name><Type type='singleValue' >input</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Readings Separator</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ListItem' ><Name type='singleValue' >ListItem</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Item1,Item2,Item3,Item4,Item5</Value><DisplayName type='singleValue' >List captions</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlign' ><Name type='singleValue' >TextAlign</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>center</element><element>right</element></Value><DisplayName type='singleValue' >Text alighnment </DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='RowHeight' ><Name type='singleValue' >RowHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >48</Value><DisplayName type='singleValue' >Rows height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='TextAreaPlugin' PageSource='undefined'><location><x>601</x><y>601</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >TextAreaPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >model</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >601</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >601</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >150</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >24</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Value' ><Name type='singleValue' >Value</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Text</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlighn' ><Name type='singleValue' >TextAlighn</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>center</element><element>right</element></Value><DisplayName type='singleValue' >Text alighnment </DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='MaxLength' ><Name type='singleValue' >MaxLength</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >MaxLength</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Font color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>select font</element><element>Arial</element><element>Courrier New</element><element>Times New Roman</element></Value><DisplayName type='singleValue' >Font family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >select font</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='placeholder' ><Name type='singleValue' >placeholder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >placeholder</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PlaceholderCaption' ><Name type='singleValue' >PlaceholderCaption</Name><Type type='singleValue' >input</Type><Value type='singleValue' >type here</Value><DisplayName type='singleValue' >placeholder caption</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DisableEditing' ><Name type='singleValue' >DisableEditing</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Disable editing</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='OnChange' ><Name type='singleValue' >OnChange</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >on change event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='OnBlur' ><Name type='singleValue' >OnBlur</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >on Blur event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='DigitalLCD' PageSource='undefined'><location><x>119</x><y>84</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >DigitalLCD</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >MSE</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >119</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >84</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >240</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >52</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#2905e1</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackGroundColor' ><Name type='singleValue' >BackGroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#0400ff</Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='NumberValue' ><Name type='singleValue' >NumberValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Reading</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='displayAngle' ><Name type='singleValue' >displayAngle</Name><Type type='singleValue' >input</Type><Value type='singleValue' >8</Value><DisplayName type='singleValue' >Reading rotation</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='digitHeight' ><Name type='singleValue' >digitHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >20</Value><DisplayName type='singleValue' >Digit height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='digitWidth' ><Name type='singleValue' >digitWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >8</Value><DisplayName type='singleValue' >Digit width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='digitDistance' ><Name type='singleValue' >digitDistance</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Digit distance</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='segmentWidth' ><Name type='singleValue' >segmentWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Segment width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='segmentDistance' ><Name type='singleValue' >segmentDistance</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Segment distance</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='colorOn' ><Name type='singleValue' >colorOn</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Color on</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='colorOff' ><Name type='singleValue' >colorOff</Name><Type type='singleValue' >color</Type><Value type='singleValue' >transparent</Value><DisplayName type='singleValue' >Color off</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='valueKey' ><Name type='singleValue' >valueKey</Name><Type type='singleValue' >ReadingsListSelect</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Value Field</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' > </SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ListPlugin' PageSource='undefined'><location><x>763</x><y>11</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ListPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Pred_list</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >763</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >11</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >170</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >180</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >0</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Background color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedValue' ><Name type='singleValue' >SelectedValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Selected item</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='SelectedIndex' ><Name type='singleValue' >SelectedIndex</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Selected item index</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReadingsSeparator' ><Name type='singleValue' >ReadingsSeparator</Name><Type type='singleValue' >input</Type><Value type='singleValue' >,</Value><DisplayName type='singleValue' >Readings Separator</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ListItem' ><Name type='singleValue' >ListItem</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Item1,Item2,Item3,Item4,Item5</Value><DisplayName type='singleValue' >List captions</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TextAlign' ><Name type='singleValue' >TextAlign</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>left</element><element>center</element><element>right</element></Value><DisplayName type='singleValue' >Text alighnment </DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >left</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='RowHeight' ><Name type='singleValue' >RowHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >48</Value><DisplayName type='singleValue' >Rows height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>14px</element><element>17px</element><element>20px</element><element>22px</element><element>24px</element><element>26px</element><element>28px</element></Value><DisplayName type='singleValue' >Font size</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >14px</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='LineChartPlugin' PageSource='undefined'><location><x>2</x><y>202</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >ddd, MMM DD, YYYY hh:mm a</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >false</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' >{}</Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >LineChartPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >LineChart 1</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >202</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >940</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >380</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' >412,TimeStamp,currentLuxValue,captureTime</Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' >SELECT  `TimeStamp`,`currentLuxValue`,`captureTime` FROM `GROUP_412` order by `TimeStamp` asc </Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >dashed</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Legend' ><Name type='singleValue' >Legend</Name><Type type='singleValue' >input</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Legend</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='drawGrid' ><Name type='singleValue' >drawGrid</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Show Grid Lines</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='gridLineColor' ><Name type='singleValue' >gridLineColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >gray</Value><DisplayName type='singleValue' >Grid lines color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='chartHeader' ><Name type='singleValue' >chartHeader</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Live Data From Light Sensor</Value><DisplayName type='singleValue' >Header</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='xlabel' ><Name type='singleValue' >xlabel</Name><Type type='singleValue' >input</Type><Value type='singleValue' > Time Stamp</Value><DisplayName type='singleValue' >X label Header</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ylabel' ><Name type='singleValue' >ylabel</Name><Type type='singleValue' >input</Type><Value type='singleValue' > Lux Value</Value><DisplayName type='singleValue' >Y label Header</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='defaultMaxY' ><Name type='singleValue' >defaultMaxY</Name><Type type='singleValue' >input</Type><Value type='singleValue' > 600</Value><DisplayName type='singleValue' >Max Value Of Y-axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='GraphsColorsArr' ><Name type='singleValue' >GraphsColorsArr</Name><Type type='singleValue' >input</Type><Value type='singleValue' >blue,red,green</Value><DisplayName type='singleValue' >Lines colors</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='axisLabelColor' ><Name type='singleValue' >axisLabelColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#1a52d5</Value><DisplayName type='singleValue' >Axis labels colors</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='axisLabelWidth' ><Name type='singleValue' >axisLabelWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >50</Value><DisplayName type='singleValue' >axis Label Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='pointSize' ><Name type='singleValue' >pointSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >5</Value><DisplayName type='singleValue' >Point size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='XpixelsPerLabel' ><Name type='singleValue' >XpixelsPerLabel</Name><Type type='singleValue' >input</Type><Value type='singleValue' >30</Value><DisplayName type='singleValue' >X Labels Spaces</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='YpixelsPerLabel' ><Name type='singleValue' >YpixelsPerLabel</Name><Type type='singleValue' >input</Type><Value type='singleValue' >30</Value><DisplayName type='singleValue' >Y Labels Spaces</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='XVerticalDegree' ><Name type='singleValue' >XVerticalDegree</Name><Type type='singleValue' >input</Type><Value type='singleValue' >30</Value><DisplayName type='singleValue' >X rotate Degree</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='marginValue' ><Name type='singleValue' >marginValue</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >X Margin Top</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='showRangeSelector' ><Name type='singleValue' >showRangeSelector</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show Range Selector</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='rangeSelectorHeight' ><Name type='singleValue' >rangeSelectorHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >40</Value><DisplayName type='singleValue' >Range Selector Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='highlightSeriesOpts' ><Name type='singleValue' >highlightSeriesOpts</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Highlight Series</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='strokeWidth' ><Name type='singleValue' >strokeWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >stroke Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='rangeSelectorPlotFillColor' ><Name type='singleValue' >rangeSelectorPlotFillColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Range Selector Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='fillAlpha' ><Name type='singleValue' >fillAlpha</Name><Type type='singleValue' >input</Type><Value type='singleValue' >0.2</Value><DisplayName type='singleValue' >fill Alpha</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='axisLabelFontSize' ><Name type='singleValue' >axisLabelFontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >14</Value><DisplayName type='singleValue' >axis Label Font Size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LegendBehav' ><Name type='singleValue' >LegendBehav</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>onmouseover</element><element>follow</element></Value><DisplayName type='singleValue' >Legend display behaviour</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >onmouseover</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ShapePlugin' PageSource='undefined'><location><x>1217</x><y>16</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ShapePlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Flag</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1217</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >16</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >40</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >20</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSource' ><Name type='singleValue' >DataSource</Name><Type type='singleValue' >SensorsList</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Data Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Query' ><Name type='singleValue' >Query</Name><Type type='singleValue' >DataSet</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >SQL query statement</DisplayName><exist type='singleValue' >true</exist><Data type='singleValue' ></Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Rounded borders</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ffffff</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShapeType' ><Name type='singleValue' >ShapeType</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Circle</element><element>Rectangle</element><element>Ellipse</element></Value><DisplayName type='singleValue' >Shape Type</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Circle</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ColorRange' ><Name type='singleValue' >ColorRange</Name><Type type='singleValue' >ColorRange</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Color Range</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='valueKey' ><Name type='singleValue' >valueKey</Name><Type type='singleValue' >ReadingsListSelect</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Value Field</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' > </SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Color' ><Name type='singleValue' >Color</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#ff0000</Value><DisplayName type='singleValue' >Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><usedPlugin category ='installed' type='ButtonPlugin' PageSource='undefined'><location><x>1179</x><y>161</y></location><Parameter name='TimeFormat' ><Name type='singleValue' >TimeFormat</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationAliase' ><Name type='singleValue' >EquationAliase</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='EquationText' ><Name type='singleValue' >EquationText</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ShowExtraReadingsFirst' ><Name type='singleValue' >ShowExtraReadingsFirst</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ExtraSensorReadings' ><Name type='singleValue' >ExtraSensorReadings</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DataSourceType' ><Name type='singleValue' >DataSourceType</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ReffrenceWithAlias' ><Name type='singleValue' >ReffrenceWithAlias</Name><Type type='singleValue' >hidden</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' > </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PageSource' ><Name type='singleValue' >PageSource</Name><Type type='singleValue' >label</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Page Source</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='TypeOfPlugin' ><Name type='singleValue' >TypeOfPlugin</Name><Type type='singleValue' >label</Type><Value type='singleValue' >ButtonPlugin</Value><DisplayName type='singleValue' >Plugin Type</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginCategory' ><Name type='singleValue' >PluginCategory</Name><Type type='singleValue' >label</Type><Value type='singleValue' >installed</Value><DisplayName type='singleValue' >Plugin Category</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginName' ><Name type='singleValue' >PluginName</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Clear</Value><DisplayName type='singleValue' >Plugin name</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationX' ><Name type='singleValue' >LocationX</Name><Type type='singleValue' >input</Type><Value type='singleValue' >1179</Value><DisplayName type='singleValue' >Location of X axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='LocationY' ><Name type='singleValue' >LocationY</Name><Type type='singleValue' >input</Type><Value type='singleValue' >161</Value><DisplayName type='singleValue' >Location of Y axis</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginWidth' ><Name type='singleValue' >PluginWidth</Name><Type type='singleValue' >input</Type><Value type='singleValue' >104</Value><DisplayName type='singleValue' >Plugin Width</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginHeight' ><Name type='singleValue' >PluginHeight</Name><Type type='singleValue' >input</Type><Value type='singleValue' >32</Value><DisplayName type='singleValue' >Plugin Height</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Visible' ><Name type='singleValue' >Visible</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' >1</Value><DisplayName type='singleValue' >Visible</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='CssClass' ><Name type='singleValue' >CssClass</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Css Classes</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleDataSource' ><Name type='singleValue' >multipleDataSource</Name><Type type='singleValue' >multipleDataSource</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple data source</DisplayName><exist type='singleValue' >false</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='multipleQueries' ><Name type='singleValue' >multipleQueries</Name><Type type='singleValue' >multipleQueries</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Multiple queries</DisplayName><exist type='singleValue' >false</exist><Data type='array' >[]</Data><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='PluginObject' ><Name type='singleValue' >PluginObject</Name><Type type='singleValue' >PluginObject</Type><Value type='singleValue' >[object Object]</Value><DisplayName type='singleValue' >Plugin Object</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HelpTip' ><Name type='singleValue' >HelpTip</Name><Type type='singleValue' >input</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Help Tip</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='version' ><Name type='singleValue' >version</Name><Type type='singleValue' >label</Type><Value type='singleValue' >2</Value><DisplayName type='singleValue' >Version</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onclick' ><Name type='singleValue' >onclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' >function DataListRemoveAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value,
        &quot;count&quot;: &quot;0&quot;
      };

      DataList.remove(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListupdateAsync(name, value, index) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value, // updated value
        &quot;index&quot;: index // updated index
      };

      DataList.update(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}


DataListupdateAsync(&apos;class_room_Adel_10&apos;, &apos;v&apos;, 0)
DataListRemoveAsync(&apos;class_room_Adel_10&apos;, &apos;v&apos;)

SetPluginParameterValue(&apos;Train&apos;, &apos;Caption&apos;, &apos;Train&apos;);
SetPluginParameterValue(&apos;Flag&apos;, &apos;Color&apos;, &apos;red&apos;);
SetPluginParameterValue(&apos;Clear&apos;, &apos;Visible&apos;, 0);
SetPluginParameterValue(&apos;Predict&apos;, &apos;Visible&apos;, 0);

DrawPlugin(&apos;Train&apos;);
DrawPlugin(&apos;Flag&apos;);
DrawPlugin(&apos;Clear&apos;);
DrawPlugin(&apos;Predict&apos;);</Value><DisplayName type='singleValue' >OnClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ondbclick' ><Name type='singleValue' >ondbclick</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnDbClick Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseover' ><Name type='singleValue' >onmouseover</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseOver Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='onmouseleave' ><Name type='singleValue' >onmouseleave</Name><Type type='singleValue' >event</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >OnMouseLeave Event</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='HasBorder' ><Name type='singleValue' >HasBorder</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Show border</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderRounded' ><Name type='singleValue' >BorderRounded</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Border Rounded</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderColor' ><Name type='singleValue' >BorderColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' >#000000</Value><DisplayName type='singleValue' >Border color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderThikness' ><Name type='singleValue' >BorderThikness</Name><Type type='singleValue' >input</Type><Value type='singleValue' >3</Value><DisplayName type='singleValue' >Border thikness</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BorderStyle' ><Name type='singleValue' >BorderStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>solid</element><element>dashed</element><element>dotted</element></Value><DisplayName type='singleValue' >Border style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >solid</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='Caption' ><Name type='singleValue' >Caption</Name><Type type='singleValue' >input</Type><Value type='singleValue' >Clear</Value><DisplayName type='singleValue' >Caption </DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='ButtonStyle' ><Name type='singleValue' >ButtonStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>default</element><element>primary</element><element>success</element><element>info</element><element>warning</element><element>danger</element></Value><DisplayName type='singleValue' >Button style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >danger</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontFamily' ><Name type='singleValue' >FontFamily</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>Arial</element><element>Courrier New</element><element>Times New Roman</element></Value><DisplayName type='singleValue' >Font Family</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >Arial</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontSize' ><Name type='singleValue' >FontSize</Name><Type type='singleValue' >input</Type><Value type='singleValue' >14</Value><DisplayName type='singleValue' >Font Size</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontStyle' ><Name type='singleValue' >FontStyle</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>italic</element><element>oblique</element><element>initial</element></Value><DisplayName type='singleValue' >Font Style</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontWeight' ><Name type='singleValue' >FontWeight</Name><Type type='singleValue' >Select</Type><Value type='array' ><element>normal</element><element>bold</element><element>bolder</element><element>lighter</element><element>100</element><element>200</element><element>300</element><element>400</element><element>500</element><element>600</element><element>700</element><element>800</element><element>900</element></Value><DisplayName type='singleValue' >Font Weight</DisplayName><exist type='singleValue' >true</exist><SelectedValue type='singleValue' >normal</SelectedValue><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='FontColor' ><Name type='singleValue' >FontColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Font Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='BackgroundColor' ><Name type='singleValue' >BackgroundColor</Name><Type type='singleValue' >color</Type><Value type='singleValue' > </Value><DisplayName type='singleValue' >Background Color</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter><Parameter name='DisabledButton' ><Name type='singleValue' >DisabledButton</Name><Type type='singleValue' >True/False</Type><Value type='singleValue' ></Value><DisplayName type='singleValue' >Disabled Button</DisplayName><exist type='singleValue' >true</exist><addProperty type='singleValue' >function(t,e){this[t]=e}</addProperty></Parameter></usedPlugin><script>function DataListgetAsync(name) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name
      }

      ;

      DataList.get(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res)
      }
    }

  );
}

DataListgetAsync(&apos;class_room_Adel_10&apos;).then(results =&gt; {
    if (results[&apos;result&apos;].length &gt; 0) {

      SetPluginParameterValue(&apos;Train&apos;, &apos;Caption&apos;, &apos;Trained&apos;);
      SetPluginParameterValue(&apos;Flag&apos;, &apos;Color&apos;, &apos;green&apos;);
      DrawPlugin(&apos;Train&apos;);
      DrawPlugin(&apos;Flag&apos;);
    } else {
      SetPluginParameterValue(&apos;Clear&apos;, &apos;Visible&apos;, 0);
      DrawPlugin(&apos;Clear&apos;);
      SetPluginParameterValue(&apos;Predict&apos;, &apos;Visible&apos;, 0);
      DrawPlugin(&apos;Predict&apos;);

    }
  }

).then(event.end);
function Plugin_onclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
case 'Label 1':{
 
break;
}
case 'Timer':{
 
break;
}
case 'Grid 1':{
 
break;
}
case 'Train':{
function DataListAddAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const dataListObj = {
        name: name,
        value: value,
        insertAt: &quot;tail&quot;
      }

      ;
      DataList.add(dataListObj, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListRemoveAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value,
        &quot;count&quot;: &quot;0&quot;
      };

      DataList.remove(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListgetAsync(name) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name
      };

      DataList.get(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res)
      }
    }

  );
}

function DataListupdateAsync(name, value, index) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value, // updated value
        &quot;index&quot;: index // updated index
      };

      DataList.update(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}


function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
      // SearchIn(query, searchIn_callback);
      ExecuteQueryModified(query, searchIn_callback, &apos;&apos;);

      function searchIn_callback(err, result) {
        if (err) {
          return reject(err);
        }

        // write your code here
        resolve(result);
      }
    }

  );
}

function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
      // SearchIn(query, searchIn_callback);
      ExecuteQueryModified(query, searchIn_callback, &apos;&apos;);

      function searchIn_callback(err, result) {
        if (err) {
          return reject(err);
        }

        // write your code here
        resolve(result);
      }
    }

  );
}

/**
 * naive compare array
 * https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730
 *
 * @param {Array} other
 * @returns
 */
Array.prototype.equalsTo = function(other) {
  return JSON.stringify(this) == JSON.stringify(other);
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 * @param {Array} arr
 * @param {number} depth
 * @returns
 */
function flat(arr, depth = 1) {
  return depth &gt; 0 ? arr.reduce((acc, val) =&gt; acc.concat(Array.isArray(val) ? flat(val, depth - 1) : val), []) :
    arr.slice();
}

/**
 *
 * @param {number} depth
 * @returns
 */
Array.prototype.flat = function(depth = 1) {
  return flat(this, depth);
}

class NDArray extends Array {

  /**
   * https://stackoverflow.com/questions/7135874/element-wise-operations-in-javascript
   * @param {NDArray|number} other
   * @param {callbackfn} op
   * @returns
   */
  iOperation(other, op) {
    let sThis = shape(this);

    if (typeof(other) === &quot;number&quot;) {
      return reshape(this.flatten().map(el =&gt; op(el, other)),
        sThis);
    }

    other = array(other);
    let sOther = shape(other);

    if (sThis.equalsTo(sOther)) {
      other = other.flatten();
      return reshape(this.flatten().map((el, i) =&gt; op(el, other[i])),
        sThis);
    } else {
      // TODO handling broadcasting
      sThis = resultantShape(sThis, sOther);
      other = broadcast(other, sThis).flatten();
    }

    return reshape(broadcast(this, sThis).flatten().map((el, i) =&gt; op(el, other[i])),
      sThis);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  add(other) {
    return this.iOperation(other, (a, b) =&gt; a + b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  mul(other) {
    return this.iOperation(other, (a, b) =&gt; a * b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  sub(other) {
    return this.iOperation(other, (a, b) =&gt; a - b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  div(other) {
    return this.iOperation(other, (a, b) =&gt; a / b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  equals(other) {
    return this.iOperation(other, (a, b) =&gt; a == b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  power(other) {
    return this.iOperation(other, (a, b) =&gt; a ** b);
  }

  /**
   *
   * @returns
   */
  flatten() {
    // FIXME not supported on MoT
    return this.flat(ndim(this) - 1);
  }

}

/**
 * a: array-like or iterable
 * @param {Array} a
 * @returns
 */
function array(a) {
  return NDArray.from(a);
}

/**
 *
 * @param {number|NDArray} size
 * @returns
 */
function empty(size) {
  if (typeof(size) === &quot;number&quot;) {
    return new NDArray(size);
  }

  if (size instanceof Array) {
    let p = 1;
    p = size.flat(size.length - 1).reduce((p, el) =&gt; p * el);
    return reshape(Array(p), size);
  }
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function zeros(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(0),
    size);
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function ones(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(1),
    size);
}

/**
 *
 * @param {NDArray} vector
 * @param {number} k
 * @returns
 */
function diag(vector, k = 0) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  let res = [];

  switch (ndim(vector)) {
    case 1:
      res = vector.length + Math.abs(k);
      res = Array(2).fill(res);
      res = zeros(res);

      for (let i = Math.max(0, -k), j = Math.max(0, k), l = 0; l &lt; vector.length; i++, j++, l++) {
        res[i][j] = vector[l];
      }

      return res;
    case 2:
      let lim = Math.min(...shape(vector));
      res = empty(lim);

      for (let i = 0; i &lt; lim; i++) {
        res[i] = vector[i][i];
      }

      return res;
    default:
      throw Error(&quot;Array must be 1D or 2D&quot;);
  }
}

/**
 * create an identity matrix
 * @param {number} size
 * @returns
 */
function eye(size) {
  return diag(ones(size));
}

/**
 * returns vector[i+1] - vector[i]
 * @param {NDArray} vector
 * @param {number} order
 * @returns
 */
function diff(vector, order = 1) {
  if (order == 0) {
    return vector;
  }

  let self = array(vector);

  for (let d = 0; d &lt; order; d++) {
    let other = self.slice(0, -1);
    self = self.slice(1);
    self = self.map((s, idx) =&gt; s - other[idx]);
  }

  return self;
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function cumsum(vector) {
  var total = 0;
  return vector.map((el) =&gt; total += el);
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function mean(vector) {
  return sum(array(vector)) / vector.length;
}

/**
 * number of dimensions of the array
 * @param {Array|NDArray} vector
 * @returns
 */
function ndim(vector) {
  let dim = 0;
  let self = [...vector];

  for (dim = 0; self instanceof Array; dim++) {
    self = self[0]; // FIXME array elements are not required to be the same here
  }

  return dim;
}

/**
 * FIXME transposing only 2D
 * https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript
 * @param {NDArray} vector
 * @returns
 */
function transpose(vector) {
  const dim = ndim(vector);

  if (dim == 1) {
    return vector;
  }

  if (dim == 2) {
    // return vector[0].map((_, j) =&gt;
    // 	vector.map((row) =&gt; row[j])
    // );
    return array(vector[0].map((_, j) =&gt; [...vector].map((row) =&gt; row[j])));
  }
}

/**
 * https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array
 * @param {Array|NDArray} vector
 * @returns
 */
function shape(vector) {
  let self = [...vector];
  const n = ndim(vector);

  let shape = [vector.length]
  for (let dim = 1; dim &lt; n; dim++) {
    shape.push(self[0].length);
    self = self[0];
  }

  return shape;
}

/**
 * reshapes the array into the given shape, if possible
 * @param {Array|NDArray} vector
 * @param {Array} size
 * @returns
 */
function reshape(vector, size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size];
  }

  if (size.map(el =&gt; el == -1).reduce((tot, el) =&gt; tot + el) &gt; 1) {
    throw Error(&quot;Cannot infer more than one dimension&quot;);
  }

  let tSize = 1;
  tSize = shape(vector).reduce((tSize, el) =&gt; tSize * el);
  let oSize = 1;
  oSize = size.reduce((oSize, el) =&gt; oSize * el);

  if (oSize &lt; 0) {
    switch (tSize % oSize) {
      case 0:
        let index = size.indexOf(-1);
        size[index] = -tSize / oSize;
        break;
      default:
        throw Error(&quot;Unable to infer missing dimension&quot;);
    }
  } else if (tSize != oSize) {
    throw Error(&quot;Incompatible shapes&quot;);
  }

  // vector = array(vector).flatten();
  vector = array(vector).flatten();
  // FIXME keeping the largest array as ndarray, &amp; internal arrays
  // as normal arrays
  vector = [...vector];
  let result = [];
  size = size.reverse();

  for (let idx = 0; idx &lt; size.length - 1; idx++) {
    let step = size[idx];

    for (let i = 0; i &lt; vector.length; i += step) {
      result.push(vector.slice(i, i + step));
    }

    vector = result;
    result = [];
  }

  // FIXME had to restore the original order for size
  size = size.reverse();
  return array(vector);
}

/**
 * TODO continue if needed
 * https://numpy.org/doc/stable/reference/generated/numpy.sum.html
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
 * @param {NDArray} vector
 * @param {number} axis
 * @param {number} initialValue
 * @returns
 */
function sum(vector, axis = null, initialValue = 0) {
  if ((ndim(vector) == 1) || axis === null) {
    // full array or 1D array
    return vector.flatten().reduce(((sum, el) =&gt; sum + el),
      initialValue);
  }

  // FIXME to avoid breaking
  return vector;
  // if ((axis &lt; 0) &amp;&amp; (-axis &lt;= this.length)) {
  // 	axis = this.length - axis
  // }
}

/**
 * FIXME implement higher dimensions
 * @param {NDArray} a
 * @param {NDArray} b
 * @returns
 */
function dot(a, b) {
  const shapeA = shape(a);
  const shapeB = shape(b);

  if (shapeA[shapeA.length - 1] != shapeB[0]) {
    throw Error(&quot;Internal dimension mismatch&quot;);
  }

  // vector dot product
  if ((ndim(a) == 1) &amp;&amp; (ndim(b) == 1)) {
    return sum(a.mul(b));
  }

  if (ndim(a) == 1) {
    a = transpose([a]);
  }

  if (ndim(b) == 1) {
    b = transpose([b]);
  }

  // FIXME 2D operation only
  b = transpose(b);
  return a.map(row =&gt; b.map(col =&gt; sum(array(row).mul(col))));
}

/**
 * check if given shapes allow for broadcasting
 * @param {Array} a
 * @param {Array} b
 * @returns
 */
function canBroadcast(a, b) {
  let [i,
    j
  ] = [Array.from(a).reverse(),
    Array.from(b).reverse()
  ];
  [i,
    j
  ] = (i.length &gt;= j.length) ? [i,
    j
  ] : [j, i];
  var res = true;
  j.map((el, idx) =&gt; res &amp;= (el == i[idx]) | (el == 1) | (i[idx] == 1));
  return res;
}

/**
 *
 * @param {Array} size0
 * @param {Array} size1
 * @returns
 */
function resultantShape(size0, size1) {
  matchDimensions(size0, size1);
  return size0.map((el, i) =&gt; Math.max(el, size1[i]));
}

/**
 *
 * @param {Array} a
 * @param {Array} b
 */
function matchDimensions(a, b) {
  var size = a.length - b.length;

  if (size &lt; 0) {
    a.unshift(...ones(-size));
  } else if (size &gt; 0) {
    b.unshift(...ones(size));
  }
}

/**
 * https://numpy.org/doc/stable/user/basics.broadcasting.html
 * @param {NDArray} vector
 * @param {Array} size
 * @returns
 */
function broadcast(vector, size) {
  let vSize = shape(vector);

  if (!canBroadcast(vSize, size)) {
    throw Error(&quot;Can not broadcast&quot;);
  }

  matchDimensions(vSize, size);
  vector = vector.flatten();
  var tempSize = [];

  for (let i = size.length - 1; i &gt;= 0; i--) {
    if (vSize[i] == size[i]) {
      tempSize.shift();
      tempSize.unshift(-1, size[i]);
      vector = reshape(vector, tempSize);
    } else {
      vector = vector.map(el =&gt; new NDArray(size[i]).fill(el));
      tempSize = shape(vector);
    }
  }

  return reshape(vector, size);
}

/**
 * https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
 * @param {number} start
 * @param {number} end
 * @param {number} step
 * @returns
 */
function arange(start, end, step) {
  if (end === undefined) {
    end = start;
    start = 0;
  }

  step = (step === undefined) ? 1 : step;

  if ((end &lt; start) &amp;&amp; (step &gt; 0)) {
    return [];
  }

  [start,
    end
  ] = (start &lt; end) ? [start,
    end
  ] : [end,
    start
  ];
  let res = array(Array(end).keys()).slice(start).filter(el =&gt; !((el - start) % step));
  return (step &gt;= 0) ? res : res.reverse();
}


/**
 *
 * @param {number} start
 * @param {number} stop
 * @param {number} num
 * @returns
 */
function linspace(start, stop, num = 50) {
  let step = (stop - start) / (num - 1);
  let res = [];

  for (let element = start; element &lt; stop; element += step) {
    // https://stackoverflow.com/questions/2221167/javascript-formatting-a-rounded-number-to-n-decimals
    res.push(parseFloat(element.toFixed(8)));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function vstack(elements) {
  let res = [];
  let size = shape(elements[0]);

  if (size.length == 1) {
    elements.forEach(el =&gt; res.push(el));
  } else {
    elements.forEach(el =&gt; res.push(...el));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function hstack(elements) {
  // FIXME edge case
  var res;

  if (ndim(elements[0]) == 1) {
    res = [];

    elements.forEach(el =&gt; {
        res.push(...el)
      }

    );
    return array(res);
  }

  res = elements.map(el =&gt; transpose(el));
  return transpose(vstack(res));
}

const linalg = {

  /**
   *
   * @param {NDArray} vector
   * @param {number} ord
   * @returns
   */
  norm: function(vector, ord = 2) {

    // FIXME edge cases
    if (ord === Infinity) {} else if (ord === -Infinity) {} else if (ord == 0) {}

    return sum(vector.power(ord)) ** 1 / ord
  }
}

const random = {

  /**
   *
   * @param {Array} size
   * @returns
   */
  random: function(size) {
    return reshape(empty(size).flatten().map(_ =&gt; Math.random()),
      size);
  }
}

np = {
  array,
  empty,
  diff,
  dot,
  ndim,
  reshape,
  shape,
  sum,
  transpose,
  diag,
  ones,
  zeros,
  eye,
  arange,
  vstack,
  hstack,
  NDArray,
  linalg,
  linspace,
  random,
  cumsum,
  mean
}

class GradientDescent {

  /**
   *
   * @param {number} learningRate
   * @param {object} kwargs
   */
  constructor(learningRate = 0.001, kwargs = {}

  ) {
    this._alpha = learningRate;
    this._W = kwargs[&quot;weights&quot;];
    this._gamma = kwargs[&quot;momentum&quot;] | 0;
    this._b = kwargs[&quot;batchSize&quot;];
    this._costFn = kwargs[&quot;costFunction&quot;];

    if (!this._costFn) {
      this._costFn = function(labels, predictions, m = null) {
        m = 2 * ((m) ? m : labels.length);
        return np.sum(labels.sub(predictions).power(2)) / m;
      }

      ;
    }

    // FIXME gradient is d[cost]/d_W, so it should be different for each cost function
    this._grad = kwargs[&quot;gradient&quot;];

    if (!this._grad) {
      this._grad = function(X, y, yHat) {
        var error = yHat.sub(y);
        return np.dot(np.transpose(X), error);
      }
    }

    // TODO nesterov update
    this._update = (kwargs[&quot;nesterov&quot;]) ? this.updateNesterov : function(gradient, m, vt1 = 0) {
      this._W = this._W.sub(this.vt(gradient, m, vt1));
    }

    ;
  }

  set alpha(learningRate) {
    this._alpha = learningRate;
  }

  get alpha() {
    return this._alpha;
  }

  set gamma(momentum) {
    this._gamma = momentum;
  }

  get gamma() {
    return this._gamma;
  }

  get _coef() {
    return this._W;
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  evaluate(X) {
    return np.dot(X, this._W);
  }

  updateNesterov(X, y, m, vt1) {
    // TODO implement nesterov&apos;s update
    throw Error(&quot;Method not implemented yet&quot;)
  }

  vt(gradient, m, vt1 = 0) {
    return gradient.mul(this._alpha).div(m).add(this._gamma * vt1);
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  async predict(X) {
    var features = X.slice();

    if (np.ndim(features) == 1) {
      features = np.reshape(features, [-1, 1]);
    }

    features = [np.ones([features.length, 1]),
      features
    ];
    features = np.hstack(features);
    return this.evaluate(features);
  }

  fitSync(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // let ut = 0 // TODO support adaptive grad
    var costOld;

    ({
        costOld,
        y,
        X
      }

      = this._fitInit(X, y));

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var {
        costCurrent,
        gradient
      }

      = this._runEpoch(X, y);

      if (this._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
  }

  _runEpoch(X, y) {
    var end,
      batchX,
      batchY,
      batchPreds,
      batchGrad;

    for (let start = 0; start &lt; y.length; start += this._b) {
      end = start + this._b;
      batchX = X.slice(start, end);
      batchY = y.slice(start, end);
      batchPreds = this.evaluate(batchX);
      batchGrad = this._grad(batchX, batchY, batchPreds);
      // TODO add nesterov update
      this._update(batchGrad, (this._b &gt; 1) ? this._b : y.length);
    }

    var costCurrent = this._costFn(batchY, batchPreds, this._b);

    return {
      costCurrent,
      gradient: batchGrad
    }

    ;
  }

  _fitInit(X, y) {
    var nRows = y.length;
    this._b = (this._b) ? this._b : nRows;
    // FIXME
    // var costOld = this._costFn(y.slice(-this._b), np.zeros([this._b]), this._b);
    var costOld = 0;
    X = np.hstack([np.ones([X.length, 1]), X]);
    y = np.reshape(y, [nRows, 1]);

    if (!this._W) {
      this._W = np.random.random([np.shape(X)[1], 1]);
    }

    return {
      costOld,
      y,
      X
    }

    ;
  }

  _converged(costOld, costCurrent, stopThreshold, batchGrad) {
    return !Math.abs(parseInt((costOld - costCurrent) / stopThreshold)) || !parseInt(np.linalg.norm(batchGrad) / stopThreshold);
  }

  /**
   *
   * @param {NDArray} X
   * @param {Array|NDArray} y
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // TODO flag to tell fit is done
    this.fitSync(X, y, maxIter, stopThreshold);
    return this;
  }
}

class AutoRegressionIntegratedMovingAverage extends GradientDescent {

  /**
   *
   * @param {number} p
   * @param {number} d
   * @param {number} q
   * @param {number} learningRate
   * @param {object} KWArgs
   */
  constructor(p, d, q, learningRate = .001, KWArgs = {}

  ) {
    super(learningRate, KWArgs);
    this._p = p;
    this._d = d;
    this._q = q;
  }

  get p() {
    return this._p;
  }

  get q() {
    return this._q;
  }

  get d() {
    return this._d;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} nCols
   * @returns
   */
  _buildPredictors(X, nCols) {
    var predictors = [];

    for (let idx = 1; idx &lt;= nCols; idx++) {
      predictors.push(...X.slice(nCols - idx, -idx));
    }

    return np.reshape(predictors, [-1, nCols]);
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {Array|NDArray} y
   */
  score(X, y) {
    // TODO to be implemented
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  /**
   * FIXME only works with AR variants [AR, ARI, ARIMA]
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   */
  fitSync(X, maxIter = 1024, stopThreshold = 1e-6) {
    this._initialValue = X.slice(-this._d - this._p, -this._p);
    var series = np.diff(X, this._d);

    var {
      labels,
      lags,
      residuals
    }

    = this._fitInit(series);
    var costOld = 0;
    var n = residuals.length;
    n = n ? n : lags.length;
    const ones = np.ones([lags.length, 1]);

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var features = np.hstack([ones.slice(0, n),
        lags.slice(0, n),
        residuals
      ]);

      var {
        costCurrent,
        gradient
      }

      = super._runEpoch(features, labels.slice(0, n));
      features = np.hstack([ones, lags]);
      var arW = this._W.slice(0, this._p + 1);
      residuals = labels.sub(np.dot(features, arW));
      residuals = this._buildPredictors(residuals, this._q);

      if (super._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }

    if (this._q) {
      this._residuals = residuals[0].slice(-this._q);
    }
  }

  /**
   *
   * @param {Array|NDArray} X
   * @returns
   */
  _fitInit(X) {
    let lags = this._buildPredictors(X, this._p);
    var labels = X.slice(this._p);
    this._W = np.zeros([this._p + this._q + 1, 1]);
    this._b = (this._b) ? this._b : labels.length;
    var residuals = this._buildPredictors(labels, this._q);
    this._lags = labels.slice(-this._p);
    labels = np.reshape(labels, [-1, 1]);

    return {
      labels,
      lags,
      residuals
    }

    ;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, maxIter = 1024, stopThreshold = 1e-6) {
    this.fitSync(X, maxIter, stopThreshold);
    return this;
  }

  /**
   *
   * @param {number} periods
   * @returns
   */


  forecastSync(periods) {
    let lags = this._lags.slice();
    var residuals = [];

    if (this._residuals) {
      residuals = this._residuals.slice();
    }

    for (let i = 0; i &lt; periods; i++) {
      var X = lags.slice(-this._p);
      X.push(...residuals.slice(-this._q));
      X.unshift(1);
      X = np.reshape(X, [1, -1]);
      var y = super.evaluate(X).flatten();
      lags.push(...y);

      if (residuals.length) {
        residuals.push(np.mean(residuals));
      }
    }

    // the Integration step
    // https://stackoverflow.com/questions/43563241/numpy-diff-inverted-operation
    for (let d = this._d - 1; d &gt;= 0; d--) {
      lags.unshift(this._initialValue[d]);
      lags = np.cumsum(lags);
    }

    return lags.slice(-periods);
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  async forecast(periods) {
    return this.forecastSync(periods);
  }

  updateSync(trueLags) {
    // TODO not implemented yet
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  async update(trueLags) {
    return this.updateSync(trueLags);
  }
}


function extractIdxTensor1D(listOfObjects) {
  var res = [];
  var idx = [];

  for (let i = 0; i &lt; listOfObjects.length; i++) {
    let obj = listOfObjects[i];

    for (const key in obj) {
      if (key === &quot;TimeStamp&quot;) {
        idx.push(obj[key]);
      } else {
        res.push(obj[key]);
      }
    }
  }

  // 	res = tf.tensor1d(res);
  return [idx, res];
}


const query = &quot;SELECT  `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` desc&quot;;

let datalistlenght = 0;
// TODO train

SearchInAsync(query).then((res) =&gt; {

    res = JSON.parse(res.responseText);
    [idx, val] = extractIdxTensor1D(res);



    var p = parseInt(GetPluginParameterValue(&apos;p_value&apos;, &apos;Selected item&apos;));
    var d = parseInt(GetPluginParameterValue(&apos;d_value&apos;, &apos;Selected item&apos;));
    var q = parseInt(GetPluginParameterValue(&apos;q_value&apos;, &apos;Selected item&apos;));

    mod = new AutoRegressionIntegratedMovingAverage(p, d, q);
    return mod.fit(np.array(val), 8);

  }

).then(res =&gt; {
    DataListgetAsync(&apos;class_room_Adel_10&apos;).then(results =&gt; {
      datalistlenght = results[&apos;result&apos;].length;

      if (datalistlenght == 0) {
        DataListAddAsync(&apos;class_room_Adel_10&apos;, JSON.stringify(mod))

        SetPluginParameterValue(&apos;Train&apos;, &apos;Caption&apos;, &apos;Trained&apos;);
        SetPluginParameterValue(&apos;Flag&apos;, &apos;Color&apos;, &apos;green&apos;);
        DrawPlugin(&apos;Train&apos;);
        DrawPlugin(&apos;Flag&apos;);
      } else {
        DataListupdateAsync(&apos;class_room_Adel_10&apos;, JSON.stringify(mod), 0)
      }
      SetPluginParameterValue(&apos;Predict&apos;, &apos;Visible&apos;, 1);
      DrawPlugin(&apos;Predict&apos;);
      SetPluginParameterValue(&apos;Clear&apos;, &apos;Visible&apos;, 1);
      DrawPlugin(&apos;Clear&apos;);
    }).then(event.end);

  }

).then(event.end).catch((err) =&gt; {
    // event.error(err);
  }

); 
break;
}
case 'Test':{
function DataListAddAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const dataListObj = {
        name: name,
        value: value,
        insertAt: &quot;tail&quot;
      }

      ;
      DataList.add(dataListObj, dataListCallBack);

      function dataListCallBack(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}


function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
      // SearchIn(query, searchIn_callback);
      ExecuteQueryModified(query, searchIn_callback, &apos;&apos;);

      function searchIn_callback(err, result) {
        if (err) {
          return reject(err);
        }

        // write your code here
        resolve(result);
      }
    }

  );
}

/**
 * naive compare array
 * https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730
 *
 * @param {Array} other
 * @returns
 */
Array.prototype.equalsTo = function(other) {
  return JSON.stringify(this) == JSON.stringify(other);
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 * @param {Array} arr
 * @param {number} depth
 * @returns
 */
function flat(arr, depth = 1) {
  return depth &gt; 0 ? arr.reduce((acc, val) =&gt; acc.concat(Array.isArray(val) ? flat(val, depth - 1) : val), []) :
    arr.slice();
}

/**
 *
 * @param {number} depth
 * @returns
 */
Array.prototype.flat = function(depth = 1) {
  return flat(this, depth);
}

class NDArray extends Array {

  /**
   * https://stackoverflow.com/questions/7135874/element-wise-operations-in-javascript
   * @param {NDArray|number} other
   * @param {callbackfn} op
   * @returns
   */
  iOperation(other, op) {
    let sThis = shape(this);

    if (typeof(other) === &quot;number&quot;) {
      return reshape(this.flatten().map(el =&gt; op(el, other)),
        sThis);
    }

    other = array(other);
    let sOther = shape(other);

    if (sThis.equalsTo(sOther)) {
      other = other.flatten();
      return reshape(this.flatten().map((el, i) =&gt; op(el, other[i])),
        sThis);
    } else {
      // TODO handling broadcasting
      sThis = resultantShape(sThis, sOther);
      other = broadcast(other, sThis).flatten();
    }

    return reshape(broadcast(this, sThis).flatten().map((el, i) =&gt; op(el, other[i])),
      sThis);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  add(other) {
    return this.iOperation(other, (a, b) =&gt; a + b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  mul(other) {
    return this.iOperation(other, (a, b) =&gt; a * b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  sub(other) {
    return this.iOperation(other, (a, b) =&gt; a - b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  div(other) {
    return this.iOperation(other, (a, b) =&gt; a / b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  equals(other) {
    return this.iOperation(other, (a, b) =&gt; a == b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  power(other) {
    return this.iOperation(other, (a, b) =&gt; a ** b);
  }

  /**
   *
   * @returns
   */
  flatten() {
    // FIXME not supported on MoT
    return this.flat(ndim(this) - 1);
  }

}

/**
 * a: array-like or iterable
 * @param {Array} a
 * @returns
 */
function array(a) {
  return NDArray.from(a);
}

/**
 *
 * @param {number|NDArray} size
 * @returns
 */
function empty(size) {
  if (typeof(size) === &quot;number&quot;) {
    return new NDArray(size);
  }

  if (size instanceof Array) {
    let p = 1;
    p = size.flat(size.length - 1).reduce((p, el) =&gt; p * el);
    return reshape(Array(p), size);
  }
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function zeros(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(0),
    size);
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function ones(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }

  return reshape(empty(size).flatten().fill(1),
    size);
}

/**
 *
 * @param {NDArray} vector
 * @param {number} k
 * @returns
 */
function diag(vector, k = 0) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  let res = [];

  switch (ndim(vector)) {
    case 1:
      res = vector.length + Math.abs(k);
      res = Array(2).fill(res);
      res = zeros(res);

      for (let i = Math.max(0, -k), j = Math.max(0, k), l = 0; l &lt; vector.length; i++, j++, l++) {
        res[i][j] = vector[l];
      }

      return res;
    case 2:
      let lim = Math.min(...shape(vector));
      res = empty(lim);

      for (let i = 0; i &lt; lim; i++) {
        res[i] = vector[i][i];
      }

      return res;
    default:
      throw Error(&quot;Array must be 1D or 2D&quot;);
  }
}

/**
 * create an identity matrix
 * @param {number} size
 * @returns
 */
function eye(size) {
  return diag(ones(size));
}

/**
 * returns vector[i+1] - vector[i]
 * @param {NDArray} vector
 * @param {number} order
 * @returns
 */
function diff(vector, order = 1) {
  if (order == 0) {
    return vector;
  }

  let self = array(vector);

  for (let d = 0; d &lt; order; d++) {
    let other = self.slice(0, -1);
    self = self.slice(1);
    self = self.map((s, idx) =&gt; s - other[idx]);
  }

  return self;
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function cumsum(vector) {
  var total = 0;
  return vector.map((el) =&gt; total += el);
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function mean(vector) {
  return sum(array(vector)) / vector.length;
}

/**
 * number of dimensions of the array
 * @param {Array|NDArray} vector
 * @returns
 */
function ndim(vector) {
  let dim = 0;
  let self = [...vector];

  for (dim = 0; self instanceof Array; dim++) {
    self = self[0]; // FIXME array elements are not required to be the same here
  }

  return dim;
}

/**
 * FIXME transposing only 2D
 * https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript
 * @param {NDArray} vector
 * @returns
 */
function transpose(vector) {
  const dim = ndim(vector);

  if (dim == 1) {
    return vector;
  }

  if (dim == 2) {
    // return vector[0].map((_, j) =&gt;
    // 	vector.map((row) =&gt; row[j])
    // );
    return array(vector[0].map((_, j) =&gt; [...vector].map((row) =&gt; row[j])));
  }
}

/**
 * https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array
 * @param {Array|NDArray} vector
 * @returns
 */
function shape(vector) {
  let self = [...vector];
  const n = ndim(vector);

  let shape = [vector.length]
  for (let dim = 1; dim &lt; n; dim++) {
    shape.push(self[0].length);
    self = self[0];
  }

  return shape;
}

/**
 * reshapes the array into the given shape, if possible
 * @param {Array|NDArray} vector
 * @param {Array} size
 * @returns
 */
function reshape(vector, size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size];
  }

  if (size.map(el =&gt; el == -1).reduce((tot, el) =&gt; tot + el) &gt; 1) {
    throw Error(&quot;Cannot infer more than one dimension&quot;);
  }

  let tSize = 1;
  tSize = shape(vector).reduce((tSize, el) =&gt; tSize * el);
  let oSize = 1;
  oSize = size.reduce((oSize, el) =&gt; oSize * el);

  if (oSize &lt; 0) {
    switch (tSize % oSize) {
      case 0:
        let index = size.indexOf(-1);
        size[index] = -tSize / oSize;
        break;
      default:
        throw Error(&quot;Unable to infer missing dimension&quot;);
    }
  } else if (tSize != oSize) {
    throw Error(&quot;Incompatible shapes&quot;);
  }

  // vector = array(vector).flatten();
  vector = array(vector).flatten();
  // FIXME keeping the largest array as ndarray, &amp; internal arrays
  // as normal arrays
  vector = [...vector];
  let result = [];
  size = size.reverse();

  for (let idx = 0; idx &lt; size.length - 1; idx++) {
    let step = size[idx];

    for (let i = 0; i &lt; vector.length; i += step) {
      result.push(vector.slice(i, i + step));
    }

    vector = result;
    result = [];
  }

  // FIXME had to restore the original order for size
  size = size.reverse();
  return array(vector);
}

/**
 * TODO continue if needed
 * https://numpy.org/doc/stable/reference/generated/numpy.sum.html
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
 * @param {NDArray} vector
 * @param {number} axis
 * @param {number} initialValue
 * @returns
 */
function sum(vector, axis = null, initialValue = 0) {
  if ((ndim(vector) == 1) || axis === null) {
    // full array or 1D array
    return vector.flatten().reduce(((sum, el) =&gt; sum + el),
      initialValue);
  }

  // FIXME to avoid breaking
  return vector;
  // if ((axis &lt; 0) &amp;&amp; (-axis &lt;= this.length)) {
  // 	axis = this.length - axis
  // }
}

/**
 * FIXME implement higher dimensions
 * @param {NDArray} a
 * @param {NDArray} b
 * @returns
 */
function dot(a, b) {
  const shapeA = shape(a);
  const shapeB = shape(b);

  if (shapeA[shapeA.length - 1] != shapeB[0]) {
    throw Error(&quot;Internal dimension mismatch&quot;);
  }

  // vector dot product
  if ((ndim(a) == 1) &amp;&amp; (ndim(b) == 1)) {
    return sum(a.mul(b));
  }

  if (ndim(a) == 1) {
    a = transpose([a]);
  }

  if (ndim(b) == 1) {
    b = transpose([b]);
  }

  // FIXME 2D operation only
  b = transpose(b);
  return a.map(row =&gt; b.map(col =&gt; sum(array(row).mul(col))));
}

/**
 * check if given shapes allow for broadcasting
 * @param {Array} a
 * @param {Array} b
 * @returns
 */
function canBroadcast(a, b) {
  let [i,
    j
  ] = [Array.from(a).reverse(),
    Array.from(b).reverse()
  ];
  [i,
    j
  ] = (i.length &gt;= j.length) ? [i,
    j
  ] : [j, i];
  var res = true;
  j.map((el, idx) =&gt; res &amp;= (el == i[idx]) | (el == 1) | (i[idx] == 1));
  return res;
}

/**
 *
 * @param {Array} size0
 * @param {Array} size1
 * @returns
 */
function resultantShape(size0, size1) {
  matchDimensions(size0, size1);
  return size0.map((el, i) =&gt; Math.max(el, size1[i]));
}

/**
 *
 * @param {Array} a
 * @param {Array} b
 */
function matchDimensions(a, b) {
  var size = a.length - b.length;

  if (size &lt; 0) {
    a.unshift(...ones(-size));
  } else if (size &gt; 0) {
    b.unshift(...ones(size));
  }
}

/**
 * https://numpy.org/doc/stable/user/basics.broadcasting.html
 * @param {NDArray} vector
 * @param {Array} size
 * @returns
 */
function broadcast(vector, size) {
  let vSize = shape(vector);

  if (!canBroadcast(vSize, size)) {
    throw Error(&quot;Can not broadcast&quot;);
  }

  matchDimensions(vSize, size);
  vector = vector.flatten();
  var tempSize = [];

  for (let i = size.length - 1; i &gt;= 0; i--) {
    if (vSize[i] == size[i]) {
      tempSize.shift();
      tempSize.unshift(-1, size[i]);
      vector = reshape(vector, tempSize);
    } else {
      vector = vector.map(el =&gt; new NDArray(size[i]).fill(el));
      tempSize = shape(vector);
    }
  }

  return reshape(vector, size);
}

/**
 * https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
 * @param {number} start
 * @param {number} end
 * @param {number} step
 * @returns
 */
function arange(start, end, step) {
  if (end === undefined) {
    end = start;
    start = 0;
  }

  step = (step === undefined) ? 1 : step;

  if ((end &lt; start) &amp;&amp; (step &gt; 0)) {
    return [];
  }

  [start,
    end
  ] = (start &lt; end) ? [start,
    end
  ] : [end,
    start
  ];
  let res = array(Array(end).keys()).slice(start).filter(el =&gt; !((el - start) % step));
  return (step &gt;= 0) ? res : res.reverse();
}


/**
 *
 * @param {number} start
 * @param {number} stop
 * @param {number} num
 * @returns
 */
function linspace(start, stop, num = 50) {
  let step = (stop - start) / (num - 1);
  let res = [];

  for (let element = start; element &lt; stop; element += step) {
    // https://stackoverflow.com/questions/2221167/javascript-formatting-a-rounded-number-to-n-decimals
    res.push(parseFloat(element.toFixed(8)));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function vstack(elements) {
  let res = [];
  let size = shape(elements[0]);

  if (size.length == 1) {
    elements.forEach(el =&gt; res.push(el));
  } else {
    elements.forEach(el =&gt; res.push(...el));
  }

  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function hstack(elements) {
  // FIXME edge case
  var res;

  if (ndim(elements[0]) == 1) {
    res = [];

    elements.forEach(el =&gt; {
        res.push(...el)
      }

    );
    return array(res);
  }

  res = elements.map(el =&gt; transpose(el));
  return transpose(vstack(res));
}

const linalg = {

  /**
   *
   * @param {NDArray} vector
   * @param {number} ord
   * @returns
   */
  norm: function(vector, ord = 2) {

    // FIXME edge cases
    if (ord === Infinity) {} else if (ord === -Infinity) {} else if (ord == 0) {}

    return sum(vector.power(ord)) ** 1 / ord
  }
}

const random = {

  /**
   *
   * @param {Array} size
   * @returns
   */
  random: function(size) {
    return reshape(empty(size).flatten().map(_ =&gt; Math.random()),
      size);
  }
}

np = {
  array,
  empty,
  diff,
  dot,
  ndim,
  reshape,
  shape,
  sum,
  transpose,
  diag,
  ones,
  zeros,
  eye,
  arange,
  vstack,
  hstack,
  NDArray,
  linalg,
  linspace,
  random,
  cumsum,
  mean
}

class GradientDescent {

  /**
   *
   * @param {number} learningRate
   * @param {object} kwargs
   */
  constructor(learningRate = 0.001, kwargs = {}

  ) {
    this._alpha = learningRate;
    this._W = kwargs[&quot;weights&quot;];
    this._gamma = kwargs[&quot;momentum&quot;] | 0;
    this._b = kwargs[&quot;batchSize&quot;];
    this._costFn = kwargs[&quot;costFunction&quot;];

    if (!this._costFn) {
      this._costFn = function(labels, predictions, m = null) {
        m = 2 * ((m) ? m : labels.length);
        return np.sum(labels.sub(predictions).power(2)) / m;
      }

      ;
    }

    // FIXME gradient is d[cost]/d_W, so it should be different for each cost function
    this._grad = kwargs[&quot;gradient&quot;];

    if (!this._grad) {
      this._grad = function(X, y, yHat) {
        var error = yHat.sub(y);
        return np.dot(np.transpose(X), error);
      }
    }

    // TODO nesterov update
    this._update = (kwargs[&quot;nesterov&quot;]) ? this.updateNesterov : function(gradient, m, vt1 = 0) {
      this._W = this._W.sub(this.vt(gradient, m, vt1));
    }

    ;
  }

  set alpha(learningRate) {
    this._alpha = learningRate;
  }

  get alpha() {
    return this._alpha;
  }

  set gamma(momentum) {
    this._gamma = momentum;
  }

  get gamma() {
    return this._gamma;
  }

  get _coef() {
    return this._W;
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  evaluate(X) {
    return np.dot(X, this._W);
  }

  updateNesterov(X, y, m, vt1) {
    // TODO implement nesterov&apos;s update
    throw Error(&quot;Method not implemented yet&quot;)
  }

  vt(gradient, m, vt1 = 0) {
    return gradient.mul(this._alpha).div(m).add(this._gamma * vt1);
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  async predict(X) {
    var features = X.slice();

    if (np.ndim(features) == 1) {
      features = np.reshape(features, [-1, 1]);
    }

    features = [np.ones([features.length, 1]),
      features
    ];
    features = np.hstack(features);
    return this.evaluate(features);
  }

  fitSync(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // let ut = 0 // TODO support adaptive grad
    var costOld;

    ({
        costOld,
        y,
        X
      }

      = this._fitInit(X, y));

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var {
        costCurrent,
        gradient
      }

      = this._runEpoch(X, y);

      if (this._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
  }

  _runEpoch(X, y) {
    var end,
      batchX,
      batchY,
      batchPreds,
      batchGrad;

    for (let start = 0; start &lt; y.length; start += this._b) {
      end = start + this._b;
      batchX = X.slice(start, end);
      batchY = y.slice(start, end);
      batchPreds = this.evaluate(batchX);
      batchGrad = this._grad(batchX, batchY, batchPreds);
      // TODO add nesterov update
      this._update(batchGrad, (this._b &gt; 1) ? this._b : y.length);
    }

    var costCurrent = this._costFn(batchY, batchPreds, this._b);

    return {
      costCurrent,
      gradient: batchGrad
    }

    ;
  }

  _fitInit(X, y) {
    var nRows = y.length;
    this._b = (this._b) ? this._b : nRows;
    // FIXME
    // var costOld = this._costFn(y.slice(-this._b), np.zeros([this._b]), this._b);
    var costOld = 0;
    X = np.hstack([np.ones([X.length, 1]), X]);
    y = np.reshape(y, [nRows, 1]);

    if (!this._W) {
      this._W = np.random.random([np.shape(X)[1], 1]);
    }

    return {
      costOld,
      y,
      X
    }

    ;
  }

  _converged(costOld, costCurrent, stopThreshold, batchGrad) {
    return !Math.abs(parseInt((costOld - costCurrent) / stopThreshold)) || !parseInt(np.linalg.norm(batchGrad) / stopThreshold);
  }

  /**
   *
   * @param {NDArray} X
   * @param {Array|NDArray} y
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // TODO flag to tell fit is done
    this.fitSync(X, y, maxIter, stopThreshold);
    return this;
  }
}

class AutoRegressionIntegratedMovingAverage extends GradientDescent {

  /**
   *
   * @param {number} p
   * @param {number} d
   * @param {number} q
   * @param {number} learningRate
   * @param {object} KWArgs
   */
  constructor(p, d, q, learningRate = .001, KWArgs = {}

  ) {
    super(learningRate, KWArgs);
    this._p = p;
    this._d = d;
    this._q = q;
  }

  get p() {
    return this._p;
  }

  get q() {
    return this._q;
  }

  get d() {
    return this._d;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} nCols
   * @returns
   */
  _buildPredictors(X, nCols) {
    var predictors = [];

    for (let idx = 1; idx &lt;= nCols; idx++) {
      predictors.push(...X.slice(nCols - idx, -idx));
    }

    return np.reshape(predictors, [-1, nCols]);
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {Array|NDArray} y
   */
  score(X, y) {
    // TODO to be implemented
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  /**
   * FIXME only works with AR variants [AR, ARI, ARIMA]
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   */
  fitSync(X, maxIter = 1024, stopThreshold = 1e-6) {
    this._initialValue = X.slice(-this._d - this._p, -this._p);
    var series = np.diff(X, this._d);

    var {
      labels,
      lags,
      residuals
    }

    = this._fitInit(series);
    var costOld = 0;
    var n = residuals.length;
    n = n ? n : lags.length;
    const ones = np.ones([lags.length, 1]);

    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var features = np.hstack([ones.slice(0, n),
        lags.slice(0, n),
        residuals
      ]);

      var {
        costCurrent,
        gradient
      }

      = super._runEpoch(features, labels.slice(0, n));
      features = np.hstack([ones, lags]);
      var arW = this._W.slice(0, this._p + 1);
      residuals = labels.sub(np.dot(features, arW));
      residuals = this._buildPredictors(residuals, this._q);

      if (super._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }

    if (this._q) {
      this._residuals = residuals[0].slice(-this._q);
    }
  }

  /**
   *
   * @param {Array|NDArray} X
   * @returns
   */
  _fitInit(X) {
    let lags = this._buildPredictors(X, this._p);
    var labels = X.slice(this._p);
    this._W = np.zeros([this._p + this._q + 1, 1]);
    this._b = (this._b) ? this._b : labels.length;
    var residuals = this._buildPredictors(labels, this._q);
    this._lags = labels.slice(-this._p);
    labels = np.reshape(labels, [-1, 1]);

    return {
      labels,
      lags,
      residuals
    }

    ;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, maxIter = 1024, stopThreshold = 1e-6) {
    this.fitSync(X, maxIter, stopThreshold);
    return this;
  }

  /**
   *
   * @param {number} periods
   * @returns
   */


  forecastSync(periods) {
    let lags = this._lags.slice();
    var residuals = [];

    if (this._residuals) {
      residuals = this._residuals.slice();
    }

    for (let i = 0; i &lt; periods; i++) {
      var X = lags.slice(-this._p);
      X.push(...residuals.slice(-this._q));
      X.unshift(1);
      X = np.reshape(X, [1, -1]);
      var y = super.evaluate(X).flatten();
      lags.push(...y);

      if (residuals.length) {
        residuals.push(np.mean(residuals));
      }
    }

    // the Integration step
    // https://stackoverflow.com/questions/43563241/numpy-diff-inverted-operation
    for (let d = this._d - 1; d &gt;= 0; d--) {
      lags.unshift(this._initialValue[d]);
      lags = np.cumsum(lags);
    }

    return lags.slice(-periods);
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  async forecast(periods) {
    return this.forecastSync(periods);
  }

  updateSync(trueLags) {
    // TODO not implemented yet
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  async update(trueLags) {
    return this.updateSync(trueLags);
  }
}

// x = np.linspace(0, 20);
// mod = new AutoRegressionIntegratedMovingAverage(1, 1, 1);
// mod.fit(x.slice(0, -2), 256).then(res =&gt; {
//   return res.forecast(2);
// }).then((pred) =&gt; {
//   console.log(pred);
//   console.log(x.slice(-2));
//   event.end();
// });
// read2 = getSenorRead2()
// switch (read2) {
//   case &quot;train&quot;:
//     break;
//   case &quot;predict&quot;:
//     break;
//   default:
//     event.end();
// }

function extractIdxTensor1D(listOfObjects) {
  var res = [];
  var idx = [];

  for (let i = 0; i &lt; listOfObjects.length; i++) {
    let obj = listOfObjects[i];

    for (const key in obj) {
      if (key === &quot;TimeStamp&quot;) {
        idx.push(obj[key]);
      } else {
        res.push(obj[key]);
      }
    }
  }

  // 	res = tf.tensor1d(res);
  return [idx, res];
}

function mse(a, b) {
  let error = 0
  for (let i = 0; i &lt; a.length; i++) {
    error += Math.pow((b[i] - a[i]), 2)
  }
  console.log(a.length)
  console.log(error)
  return error / a.length
}


let y = []
let y_hat = []
const query = &quot;SELECT  `TimeStamp`,`currentLuxValue` FROM `GROUP_412` order by `TimeStamp` desc&quot;;

// TODO train

SearchInAsync(query).then((res) =&gt; {
    res = JSON.parse(res.responseText);
    [idx, val] = extractIdxTensor1D(res);
    trainSize = parseInt(0.9 * val.length);
    xTrain = val.slice(0, trainSize);
    y = val.slice(-1 * (y.length - trainSize));


    var p = parseInt(GetPluginParameterValue(&apos;p_value&apos;, &apos;Selected item&apos;));
    var d = parseInt(GetPluginParameterValue(&apos;d_value&apos;, &apos;Selected item&apos;));
    var q = parseInt(GetPluginParameterValue(&apos;q_value&apos;, &apos;Selected item&apos;));

    mod = new AutoRegressionIntegratedMovingAverage(p, d, q);
    mod.fit(xTrain, 8000);
    y_hat = mod.forecastSync(y.length)

    y_hat.forEach(function(item, index) {
      y_hat[index] = parseFloat(item);
    });

    accuracy = mse(y_hat, y)

    SetPluginParameterValue(&apos;MSE&apos;, &apos;Reading&apos;, accuracy);
    DrawPlugin(&apos;MSE&apos;);

  }

).then(event.end).catch((err) =&gt; {}

);

SetPluginParameterValue(&apos;LineChart 1&apos;, &apos;Data Source&apos;, y_hat);
DrawPlugin(&apos;LineChart 1&apos;);
SetPluginParameterValue(&apos;Train&apos;, &apos;Background Color&apos;, &apos;primary&apos;);
DrawPlugin(&apos;Test&apos;); 
break;
}
case 'Predict':{
function DataListAddAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const dataListObj = {
        name: name,
        value: value,
        insertAt: &quot;tail&quot;
      }

      ;
      DataList.add(dataListObj, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListRemoveAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value,
        &quot;count&quot;: &quot;0&quot;
      };

      DataList.remove(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListgetAsync(name) {
  return new Promise((resolve, reject) =&gt; {
    const dataListObj = {
      name: name
    }
    DataList.get(dataListObj, dataListCallBack);

    function dataListCallBack(err, res) {
      if (err) {
        return reject(err);
      }
      resolve(res)
    }
  });
}

function DataListupdateAsync(name, value, index) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value, // updated value
        &quot;index&quot;: index // updated index
      };

      DataList.update(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function SearchInAsync(query) {
  return new Promise((resolve, reject) =&gt; {
    SearchIn(query, searchIn_callback);

    function searchIn_callback(err, result) {
      if (err) {
        return reject(err);
      }

      // write your code here
      resolve(result);
    }
  });
}

/**
 * naive compare array
 * https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730
 *
 * @param {Array} other
 * @returns
 */
Array.prototype.equalsTo = function(other) {
  return JSON.stringify(this) == JSON.stringify(other);
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
 * @param {Array} arr
 * @param {number} depth
 * @returns
 */
function flat(arr, depth = 1) {
  return depth &gt; 0 ? arr.reduce((acc, val) =&gt;
      acc.concat(Array.isArray(val) ? flat(val, depth - 1) :
        val), []) :
    arr.slice();
}

/**
 *
 * @param {number} depth
 * @returns
 */
Array.prototype.flat = function(depth = 1) {
  return flat(this, depth);
}

class NDArray extends Array {
  /**
   * https://stackoverflow.com/questions/7135874/element-wise-operations-in-javascript
   * @param {NDArray|number} other
   * @param {callbackfn} op
   * @returns
   */
  iOperation(other, op) {
    let sThis = shape(this);
    if (typeof(other) === &quot;number&quot;) {
      return reshape(
        this.flatten()
        .map(el =&gt;
          op(el, other)
        ),
        sThis
      );
    }
    other = array(other);
    let sOther = shape(other);
    if (sThis.equalsTo(sOther)) {
      other = other.flatten();
      return reshape(
        this.flatten()
        .map((el, i) =&gt;
          op(el, other[i])
        ),
        sThis
      );
    } else {
      // TODO handling broadcasting
      sThis = resultantShape(sThis, sOther);
      other = broadcast(other, sThis).flatten();
    }
    return reshape(
      broadcast(this, sThis).flatten()
      .map((el, i) =&gt;
        op(el, other[i])
      ),
      sThis);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  add(other) {
    return this.iOperation(other, (a, b) =&gt; a + b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  mul(other) {
    return this.iOperation(other, (a, b) =&gt; a * b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  sub(other) {
    return this.iOperation(other, (a, b) =&gt; a - b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  div(other) {
    return this.iOperation(other, (a, b) =&gt; a / b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  equals(other) {
    return this.iOperation(other, (a, b) =&gt; a == b);
  }

  /**
   *
   * @param {NDArray} other
   * @returns
   */
  power(other) {
    return this.iOperation(other, (a, b) =&gt; a ** b);
  }

  /**
   *
   * @returns
   */
  flatten() {
    // FIXME not supported on MoT
    return this.flat(ndim(this) - 1);
  }

}

/**
 * a: array-like or iterable
 * @param {Array} a
 * @returns
 */
function array(a) {
  return NDArray.from(a);
}

/**
 *
 * @param {number|NDArray} size
 * @returns
 */
function empty(size) {
  if (typeof(size) === &quot;number&quot;) {
    return new NDArray(size);
  }
  if (size instanceof Array) {
    let p = 1;
    p = size.flat(size.length - 1)
      .reduce((p, el) =&gt;
        p * el
      );
    return reshape(Array(p), size);
  }
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function zeros(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }
  return reshape(
    empty(size)
    .flatten()
    .fill(0),
    size);
}

/**
 *
 * @param {number|Array} size
 * @returns
 */
function ones(size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size]
  }
  return reshape(
    empty(size)
    .flatten()
    .fill(1),
    size);
}

/**
 *
 * @param {NDArray} vector
 * @param {number} k
 * @returns
 */
function diag(vector, k = 0) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
  let res = [];
  switch (ndim(vector)) {
    case 1:
      res = vector.length + Math.abs(k);
      res = Array(2).fill(res);
      res = zeros(res);
      for (let i = Math.max(0, -k), j = Math.max(0, k), l = 0; l &lt; vector.length; i++, j++, l++) {
        res[i][j] = vector[l];
      }
      return res;
    case 2:
      let lim = Math.min(...shape(vector));
      res = empty(lim);
      for (let i = 0; i &lt; lim; i++) {
        res[i] = vector[i][i];
      }
      return res;
    default:
      throw Error(&quot;Array must be 1D or 2D&quot;);
  }
}

/**
 * create an identity matrix
 * @param {number} size
 * @returns
 */
function eye(size) {
  return diag(ones(size));
}

/**
 * returns vector[i+1] - vector[i]
 * @param {NDArray} vector
 * @param {number} order
 * @returns
 */
function diff(vector, order = 1) {
  if (order == 0) {
    return vector;
  }
  let self = array(vector);
  for (let d = 0; d &lt; order; d++) {
    let other = self.slice(0, -1);
    self = self.slice(1);
    self = self.map((s, idx) =&gt;
      s - other[idx]
    );
  }
  return self;
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function cumsum(vector) {
  var total = 0;
  return vector.map((el) =&gt; total += el);
}

/**
 * FIXME does not work with axis
 * @param {Array|NDArray} vector
 * @returns
 */
function mean(vector) {
  return sum(array(vector)) / vector.length;
}

/**
 * number of dimensions of the array
 * @param {Array|NDArray} vector
 * @returns
 */
function ndim(vector) {
  let dim = 0;
  let self = [...vector];
  for (dim = 0; self instanceof Array; dim++) {
    self = self[0]; // FIXME array elements are not required to be the same here
  }
  return dim;
}

/**
 * FIXME transposing only 2D
 * https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript
 * @param {NDArray} vector
 * @returns
 */
function transpose(vector) {
  const dim = ndim(vector);
  if (dim == 1) {
    return vector;
  }
  if (dim == 2) {
    // return vector[0].map((_, j) =&gt;
    // 	vector.map((row) =&gt; row[j])
    // );
    return array(vector[0].map((_, j) =&gt; [...vector].map((row) =&gt; row[j])));
  }
}

/**
 * https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array
 * @param {Array|NDArray} vector
 * @returns
 */
function shape(vector) {
  let self = [...vector];
  const n = ndim(vector);
  let shape = [vector.length]
  for (let dim = 1; dim &lt; n; dim++) {
    shape.push(self[0].length);
    self = self[0];
  }
  return shape;
}

/**
 * reshapes the array into the given shape, if possible
 * @param {Array|NDArray} vector
 * @param {Array} size
 * @returns
 */
function reshape(vector, size) {
  if (typeof(size) === &quot;number&quot;) {
    size = [size];
  }
  if (size.map(el =&gt;
      el == -1
    ).reduce((tot, el) =&gt;
      tot + el
    ) &gt; 1) {
    throw Error(&quot;Cannot infer more than one dimension&quot;);
  }
  let tSize = 1;
  tSize = shape(vector)
    .reduce((tSize, el) =&gt;
      tSize * el
    );
  let oSize = 1;
  oSize = size.reduce((oSize, el) =&gt;
    oSize * el
  );
  if (oSize &lt; 0) {
    switch (tSize % oSize) {
      case 0:
        let index = size.indexOf(-1);
        size[index] = -tSize / oSize;
        break;
      default:
        throw Error(&quot;Unable to infer missing dimension&quot;);
    }
  } else if (tSize != oSize) {
    throw Error(&quot;Incompatible shapes&quot;);
  }
  // vector = array(vector).flatten();
  vector = array(vector).flatten();
  // FIXME keeping the largest array as ndarray, &amp; internal arrays
  // as normal arrays
  vector = [...vector];
  let result = [];
  size = size.reverse();
  for (let idx = 0; idx &lt; size.length - 1; idx++) {
    let step = size[idx];
    for (let i = 0; i &lt; vector.length; i += step) {
      result.push(vector.slice(i, i + step));
    }
    vector = result;
    result = [];
  }
  // FIXME had to restore the original order for size
  size = size.reverse();
  return array(vector);
}

/**
 * TODO continue if needed
 * https://numpy.org/doc/stable/reference/generated/numpy.sum.html
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
 * @param {NDArray} vector
 * @param {number} axis
 * @param {number} initialValue
 * @returns
 */
function sum(vector, axis = null, initialValue = 0) {
  if ((ndim(vector) == 1) || axis === null) {
    // full array or 1D array
    return vector.flatten()
      .reduce(((sum, el) =&gt;
          sum + el
        ),
        initialValue);
  }
  // FIXME to avoid breaking
  return vector;
  // if ((axis &lt; 0) &amp;&amp; (-axis &lt;= this.length)) {
  // 	axis = this.length - axis
  // }
}

/**
 * FIXME implement higher dimensions
 * @param {NDArray} a
 * @param {NDArray} b
 * @returns
 */
function dot(a, b) {
  const shapeA = shape(a);
  const shapeB = shape(b);
  if (shapeA[shapeA.length - 1] != shapeB[0]) {
    throw Error(&quot;Internal dimension mismatch&quot;);
  }
  // vector dot product
  if ((ndim(a) == 1) &amp;&amp; (ndim(b) == 1)) {
    return sum(a.mul(b));
  }
  if (ndim(a) == 1) {
    a = transpose([a]);
  }
  if (ndim(b) == 1) {
    b = transpose([b]);
  }
  // FIXME 2D operation only
  b = transpose(b);
  return a.map(row =&gt;
    b.map(col =&gt;
      sum(array(row).mul(col))
    )
  );
}
/**
 * check if given shapes allow for broadcasting
 * @param {Array} a
 * @param {Array} b
 * @returns
 */
function canBroadcast(a, b) {
  let [i, j] = [Array.from(a).reverse(), Array.from(b).reverse()];
  [i, j] = (i.length &gt;= j.length) ? [i, j] : [j, i];
  var res = true;
  j.map((el, idx) =&gt;
    res &amp;= (el == i[idx]) | (el == 1) | (i[idx] == 1)
  );
  return res;
}
/**
 *
 * @param {Array} size0
 * @param {Array} size1
 * @returns
 */
function resultantShape(size0, size1) {
  matchDimensions(size0, size1);
  return size0.map((el, i) =&gt;
    Math.max(el, size1[i])
  );
}

/**
 *
 * @param {Array} a
 * @param {Array} b
 */
function matchDimensions(a, b) {
  var size = a.length - b.length;
  if (size &lt; 0) {
    a.unshift(...ones(-size));
  } else if (size &gt; 0) {
    b.unshift(...ones(size));
  }
}

/**
 * https://numpy.org/doc/stable/user/basics.broadcasting.html
 * @param {NDArray} vector
 * @param {Array} size
 * @returns
 */
function broadcast(vector, size) {
  let vSize = shape(vector);
  if (!canBroadcast(vSize, size)) {
    throw Error(&quot;Can not broadcast&quot;);
  }
  matchDimensions(vSize, size);
  vector = vector.flatten();
  var tempSize = [];
  for (let i = size.length - 1; i &gt;= 0; i--) {
    if (vSize[i] == size[i]) {
      tempSize.shift();
      tempSize.unshift(-1, size[i]);
      vector = reshape(vector, tempSize);
    } else {
      vector = vector.map(el =&gt;
        new NDArray(size[i]).fill(el)
      );
      tempSize = shape(vector);
    }
  }
  return reshape(vector, size);
}

/**
 * https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
 * @param {number} start
 * @param {number} end
 * @param {number} step
 * @returns
 */
function arange(start, end, step) {
  if (end === undefined) {
    end = start;
    start = 0;
  }
  step = (step === undefined) ? 1 : step;
  if ((end &lt; start) &amp;&amp; (step &gt; 0)) {
    return [];
  }
  [start, end] = (start &lt; end) ? [start, end] : [end, start];
  let res = array(Array(end).keys())
    .slice(start)
    .filter(el =&gt;
      !((el - start) % step)
    );
  return (step &gt;= 0) ? res : res.reverse();
}


/**
 *
 * @param {number} start
 * @param {number} stop
 * @param {number} num
 * @returns
 */
function linspace(start, stop, num = 50) {
  let step = (stop - start) / (num - 1);
  let res = [];
  for (let element = start; element &lt; stop; element += step) {
    // https://stackoverflow.com/questions/2221167/javascript-formatting-a-rounded-number-to-n-decimals
    res.push(parseFloat(element.toFixed(8)));
  }
  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function vstack(elements) {
  let res = [];
  let size = shape(elements[0]);
  if (size.length == 1) {
    elements.forEach(el =&gt; res.push(el));
  } else {
    elements.forEach(el =&gt; res.push(...el));
  }
  return array(res);
}

/**
 * FIXME works for 2D arrays only
 * @param {Array} elements
 * @returns
 */
function hstack(elements) {
  // FIXME edge case
  var res;
  if (ndim(elements[0]) == 1) {
    res = [];
    elements.forEach(el =&gt; {
      res.push(...el)
    });
    return array(res);
  }
  res = elements.map(el =&gt; transpose(el));
  return transpose(vstack(res));
}

const linalg = {
  /**
   *
   * @param {NDArray} vector
   * @param {number} ord
   * @returns
   */
  norm: function(vector, ord = 2) {
    // FIXME edge cases
    if (ord === Infinity) {

    } else if (ord === -Infinity) {

    } else if (ord == 0) {

    }
    return sum(vector.power(ord)) ** 1 / ord
  }
}

const random = {
  /**
   *
   * @param {Array} size
   * @returns
   */
  random: function(size) {
    return reshape(empty(size).flatten()
      .map(_ =&gt;
        Math.random()
      ),
      size);
  }
}

np = {
  array,
  empty,
  diff,
  dot,
  ndim,
  reshape,
  shape,
  sum,
  transpose,
  diag,
  ones,
  zeros,
  eye,
  arange,
  vstack,
  hstack,
  NDArray,
  linalg,
  linspace,
  random,
  cumsum,
  mean
}

class GradientDescent {
  /**
   *
   * @param {number} learningRate
   * @param {object} kwargs
   */
  constructor(learningRate = 0.001, kwargs = {}) {
    this._alpha = learningRate;
    this._W = kwargs[&quot;weights&quot;];
    this._gamma = kwargs[&quot;momentum&quot;] | 0;
    this._b = kwargs[&quot;batchSize&quot;];
    this._costFn = kwargs[&quot;costFunction&quot;];
    if (!this._costFn) {
      this._costFn = function(labels, predictions, m = null) {
        m = 2 * ((m) ? m : labels.length);
        return np.sum(labels.sub(predictions).power(2)) / m;
      };
    }
    // FIXME gradient is d[cost]/d_W, so it should be different for each cost function
    this._grad = kwargs[&quot;gradient&quot;];
    if (!this._grad) {
      this._grad = function(X, y, yHat) {
        var error = yHat.sub(y);
        return np.dot(np.transpose(X), error);
      }
    }
    // TODO nesterov update
    this._update = (kwargs[&quot;nesterov&quot;]) ? this.updateNesterov : function(gradient, m, vt1 = 0) {
      this._W = this._W.sub(this.vt(gradient, m, vt1));
    };
  }

  set alpha(learningRate) {
    this._alpha = learningRate;
  }

  get alpha() {
    return this._alpha;
  }

  set gamma(momentum) {
    this._gamma = momentum;
  }

  get gamma() {
    return this._gamma;
  }

  get _coef() {
    return this._W;
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  evaluate(X) {
    return np.dot(X, this._W);
  }

  updateNesterov(X, y, m, vt1) {
    // TODO implement nesterov&apos;s update
    throw Error(&quot;Method not implemented yet&quot;)
  }

  vt(gradient, m, vt1 = 0) {
    return gradient.mul(this._alpha)
      .div(m)
      .add(this._gamma * vt1);
  }

  /**
   *
   * @param {NDArray} X
   * @returns
   */
  async predict(X) {
    var features = X.slice();
    if (np.ndim(features) == 1) {
      features = np.reshape(features, [-1, 1]);
    }
    features = [np.ones([features.length, 1]), features];
    features = np.hstack(features);
    return this.evaluate(features);
  }

  fitSync(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // let ut = 0 // TODO support adaptive grad
    var costOld;
    ({
      costOld,
      y,
      X
    } = this._fitInit(X, y));
    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var {
        costCurrent,
        gradient
      } = this._runEpoch(X, y);
      if (this._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
  }

  _runEpoch(X, y) {
    var end, batchX, batchY, batchPreds, batchGrad;
    for (let start = 0; start &lt; y.length; start += this._b) {
      end = start + this._b;
      batchX = X.slice(start, end);
      batchY = y.slice(start, end);
      batchPreds = this.evaluate(batchX);
      batchGrad = this._grad(batchX, batchY, batchPreds);
      // TODO add nesterov update
      this._update(batchGrad, (this._b &gt; 1) ? this._b : y.length);
    }
    var costCurrent = this._costFn(batchY, batchPreds, this._b);
    return {
      costCurrent,
      gradient: batchGrad
    };
  }

  _fitInit(X, y) {
    var nRows = y.length;
    this._b = (this._b) ? this._b : nRows;
    // FIXME
    // var costOld = this._costFn(y.slice(-this._b), np.zeros([this._b]), this._b);
    var costOld = 0;
    X = np.hstack([np.ones([X.length, 1]), X]);
    y = np.reshape(y, [nRows, 1]);
    if (!this._W) {
      this._W = np.random.random([np.shape(X)[1], 1]);
    }
    return {
      costOld,
      y,
      X
    };
  }

  _converged(costOld, costCurrent, stopThreshold, batchGrad) {
    return !Math.abs(parseInt((costOld - costCurrent) / stopThreshold)) ||
      !parseInt(np.linalg.norm(batchGrad) / stopThreshold);
  }

  /**
   *
   * @param {NDArray} X
   * @param {Array|NDArray} y
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, y, maxIter = 1024, stopThreshold = 1e-6) {
    // TODO flag to tell fit is done
    this.fitSync(X, y, maxIter, stopThreshold);
    return this;
  }
}

class AutoRegressionIntegratedMovingAverage extends GradientDescent {
  /**
   *
   * @param {number} p
   * @param {number} d
   * @param {number} q
   * @param {number} learningRate
   * @param {object} KWArgs
   */
  constructor(p, d, q, learningRate = .001, KWArgs = {}) {
    super(learningRate, KWArgs);
    this._p = p;
    this._d = d;
    this._q = q;
  }

  get p() {
    return this._p;
  }

  get q() {
    return this._q;
  }

  get d() {
    return this._d;
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} nCols
   * @returns
   */
  _buildPredictors(X, nCols) {
    var predictors = [];
    for (let idx = 1; idx &lt;= nCols; idx++) {
      predictors.push(...X.slice(nCols - idx, -idx));
    }
    return np.reshape(predictors, [-1, nCols]);
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {Array|NDArray} y
   */
  score(X, y) {
    // TODO to be implemented
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  /**
   * FIXME only works with AR variants [AR, ARI, ARIMA]
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   */
  fitSync(X, maxIter = 1024, stopThreshold = 1e-6) {
    this._initialValue = X.slice(-this._d - this._p, -this._p);
    var series = np.diff(X, this._d);
    var {
      labels,
      lags,
      residuals
    } = this._fitInit(series);
    var costOld = 0;
    var n = residuals.length;
    n = n ? n : lags.length;
    const ones = np.ones([lags.length, 1]);
    for (let epoch = 0; epoch &lt; maxIter; epoch++) {
      var features = np.hstack([
        ones.slice(0, n),
        lags.slice(0, n),
        residuals
      ]);
      var {
        costCurrent,
        gradient
      } = super._runEpoch(features, labels.slice(0, n));
      features = np.hstack([ones, lags]);
      var arW = this._W.slice(0, this._p + 1);
      residuals = labels.sub(np.dot(features, arW));
      residuals = this._buildPredictors(residuals, this._q);
      if (super._converged(costOld, costCurrent, stopThreshold, gradient)) {
        break;
      } else {
        costOld = costCurrent;
      }
    }
    if (this._q) {
      this._residuals = residuals[0].slice(-this._q);
    }
  }

  /**
   *
   * @param {Array|NDArray} X
   * @returns
   */
  _fitInit(X) {
    let lags = this._buildPredictors(X, this._p);
    var labels = X.slice(this._p);
    this._W = np.zeros([this._p + this._q + 1, 1]);
    this._b = (this._b) ? this._b : labels.length;
    var residuals = this._buildPredictors(labels, this._q);
    this._lags = labels.slice(-this._p);
    labels = np.reshape(labels, [-1, 1]);
    return {
      labels,
      lags,
      residuals
    };
  }

  /**
   *
   * @param {Array|NDArray} X
   * @param {number} maxIter
   * @param {number} stopThreshold
   * @returns
   */
  async fit(X, maxIter = 1024, stopThreshold = 1e-6) {
    this.fitSync(X, maxIter, stopThreshold);
    return this;
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  forecastSync(periods) {
    let lags = this._lags.slice();
    var residuals = [];
    if (this._residuals) {
      residuals = this._residuals.slice();
    }
    for (let i = 0; i &lt; periods; i++) {
      var X = lags.slice(-this._p);
      X.push(...residuals.slice(-this._q));
      X.unshift(1);
      X = np.reshape(X, [1, -1]);
      var y = super.evaluate(X).flatten();
      lags.push(...y);
      if (residuals.length) {
        residuals.push(np.mean(residuals));
      }
    }
    // the Integration step
    // https://stackoverflow.com/questions/43563241/numpy-diff-inverted-operation
    for (let d = this._d - 1; d &gt;= 0; d--) {
      lags.unshift(this._initialValue[d]);
      lags = np.cumsum(lags);
    }
    return lags.slice(-periods);
  }

  /**
   *
   * @param {number} periods
   * @returns
   */
  async forecast(periods) {
    return this.forecastSync(periods);
  }

  updateSync(trueLags) {
    // TODO not implemented yet
    throw new Error(&quot;Not Implemented yet!&quot;);
  }

  async update(trueLags) {
    return this.updateSync(trueLags);
  }
}



function extractIdxTensor1D(listOfObjects) {
  var res = [];
  var idx = [];
  for (let i = 0; i &lt; listOfObjects.length; i++) {
    let obj = listOfObjects[i];
    for (const key in obj) {
      if (key === &quot;TimeStamp&quot;) {
        idx.push(obj[key]);
      } else {
        res.push(obj[key]);
      }
    }
  }
  // 	res = tf.tensor1d(res);
  return [idx, res];
}
// TODO predict
DataListgetAsync(&apos;class_room_Adel_10&apos;).then((result) =&gt; {
  model = JSON.parse(result[&quot;result&quot;][0]);

  mod = new AutoRegressionIntegratedMovingAverage();
  mod._initialValue = model._initialValue
  mod._p = model._p
  mod._d = model._d
  mod._q = model._q
  mod._W = model._W
  mod._residuals = model._residuals
  mod._lags = model._lags


  var peridos = parseInt(GetPluginParameterValue(&apos;peridos_value&apos;, &apos;Selected item&apos;));
  return mod.forecast(peridos);
}).then(predictions =&gt; {
  console.log(predictions)
  // TODO use predictions
  predictions.forEach(function(item, index) {
    predictions[index] = parseFloat(item);
  });
  SetPluginParameterValue(&apos;Pred_list&apos;, &apos;List captions&apos;, predictions);
  SetPluginParameterValue(&apos;Pred_list&apos;, &apos;Visible&apos;, 1);
  DrawPlugin(&apos;Pred_list&apos;);
  console.log(predictions)
  event.end();
}).catch(event.error); 
break;
}
case 'd_value':{
 
break;
}
case 'q_value':{
 
break;
}
case 'p_value':{
 
break;
}
case 'p':{
 
break;
}
case 'd':{
 
break;
}
case 'q':{
 
break;
}
case 'peridos_value':{
 
break;
}
case 'Label 5':{
 
break;
}
case 'List w':{
 
break;
}
case 'model':{
  
break;
}
case 'MSE':{
  
break;
}
case 'Pred_list':{
  
break;
}
case 'LineChart 1':{
  
break;
}
case 'Flag':{
  
break;
}
case 'Clear':{
function DataListRemoveAsync(name, value) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value,
        &quot;count&quot;: &quot;0&quot;
      };

      DataList.remove(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}

function DataListupdateAsync(name, value, index) {
  return new Promise((resolve, reject) =&gt; {
      const opt = {
        &quot;name&quot;: name,
        &quot;value&quot;: value, // updated value
        &quot;index&quot;: index // updated index
      };

      DataList.update(opt, dataList_callback);

      function dataList_callback(err, res) {
        if (err) {
          return reject(err);
        }

        resolve(res);
      }
    }

  );
}


DataListupdateAsync(&apos;class_room_Adel_10&apos;, &apos;v&apos;, 0)
DataListRemoveAsync(&apos;class_room_Adel_10&apos;, &apos;v&apos;)

SetPluginParameterValue(&apos;Train&apos;, &apos;Caption&apos;, &apos;Train&apos;);
SetPluginParameterValue(&apos;Flag&apos;, &apos;Color&apos;, &apos;red&apos;);
SetPluginParameterValue(&apos;Clear&apos;, &apos;Visible&apos;, 0);
SetPluginParameterValue(&apos;Predict&apos;, &apos;Visible&apos;, 0);

DrawPlugin(&apos;Train&apos;);
DrawPlugin(&apos;Flag&apos;);
DrawPlugin(&apos;Clear&apos;);
DrawPlugin(&apos;Predict&apos;); 
break;
}
default :
 RTECreatedPlugins_onclick();
 break;
}
}
function Plugin_ondbclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
case 'Label 1':{
 
break;
}
case 'Timer':{
 
break;
}
case 'Grid 1':{
 
break;
}
case 'Train':{
 
break;
}
case 'Test':{
 
break;
}
case 'Predict':{
 
break;
}
case 'd_value':{
 
break;
}
case 'q_value':{
 
break;
}
case 'p_value':{
 
break;
}
case 'p':{
 
break;
}
case 'd':{
 
break;
}
case 'q':{
 
break;
}
case 'peridos_value':{
 
break;
}
case 'Label 5':{
 
break;
}
case 'List w':{
 
break;
}
case 'model':{
  
break;
}
case 'MSE':{
  
break;
}
case 'Pred_list':{
  
break;
}
case 'LineChart 1':{
  
break;
}
case 'Flag':{
  
break;
}
case 'Clear':{
  
break;
}
default :
 RTECreatedPlugins_ondbclick();
 break;
}
}
function Plugin_onmouseover(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
case 'Label 1':{
 
break;
}
case 'Timer':{
 
break;
}
case 'Grid 1':{
 
break;
}
case 'Train':{
 
break;
}
case 'Test':{
 
break;
}
case 'Predict':{
 
break;
}
case 'd_value':{
 
break;
}
case 'q_value':{
 
break;
}
case 'p_value':{
 
break;
}
case 'p':{
 
break;
}
case 'd':{
 
break;
}
case 'q':{
 
break;
}
case 'peridos_value':{
 
break;
}
case 'Label 5':{
 
break;
}
case 'List w':{
 
break;
}
case 'model':{
  
break;
}
case 'MSE':{
  
break;
}
case 'Pred_list':{
  
break;
}
case 'LineChart 1':{
  
break;
}
case 'Flag':{
  
break;
}
case 'Clear':{
  
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onrightclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
case 'Label 1':{
undefined 
break;
}
case 'Timer':{
undefined 
break;
}
case 'Grid 1':{
undefined 
break;
}
case 'Train':{
undefined 
break;
}
case 'Test':{
undefined 
break;
}
case 'Predict':{
undefined 
break;
}
case 'd_value':{
undefined 
break;
}
case 'q_value':{
undefined 
break;
}
case 'p_value':{
undefined 
break;
}
case 'p':{
undefined 
break;
}
case 'd':{
undefined 
break;
}
case 'q':{
undefined 
break;
}
case 'peridos_value':{
undefined 
break;
}
case 'Label 5':{
undefined 
break;
}
case 'List w':{
undefined 
break;
}
case 'model':{
undefined 
break;
}
case 'MSE':{
undefined 
break;
}
case 'Pred_list':{
undefined 
break;
}
case 'LineChart 1':{
undefined 
break;
}
case 'Flag':{
undefined 
break;
}
case 'Clear':{
undefined 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmouseleave(pluginName){
switch(pluginName){
case 'Page home':{
undefined 
break;
}
case 'Label 1':{
  
break;
}
case 'Timer':{
  
break;
}
case 'Grid 1':{
  
break;
}
case 'Train':{
  
break;
}
case 'Test':{
  
break;
}
case 'Predict':{
  
break;
}
case 'd_value':{
  
break;
}
case 'q_value':{
  
break;
}
case 'p_value':{
  
break;
}
case 'p':{
  
break;
}
case 'd':{
  
break;
}
case 'q':{
  
break;
}
case 'peridos_value':{
  
break;
}
case 'Label 5':{
  
break;
}
case 'List w':{
  
break;
}
case 'model':{
  
break;
}
case 'MSE':{
  
break;
}
case 'Pred_list':{
  
break;
}
case 'LineChart 1':{
  
break;
}
case 'Flag':{
  
break;
}
case 'Clear':{
  
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmousemove(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
case 'Label 1':{
undefined 
break;
}
case 'Timer':{
undefined 
break;
}
case 'Grid 1':{
undefined 
break;
}
case 'Train':{
undefined 
break;
}
case 'Test':{
undefined 
break;
}
case 'Predict':{
undefined 
break;
}
case 'd_value':{
undefined 
break;
}
case 'q_value':{
undefined 
break;
}
case 'p_value':{
undefined 
break;
}
case 'p':{
undefined 
break;
}
case 'd':{
undefined 
break;
}
case 'q':{
undefined 
break;
}
case 'peridos_value':{
undefined 
break;
}
case 'Label 5':{
undefined 
break;
}
case 'List w':{
undefined 
break;
}
case 'model':{
undefined 
break;
}
case 'MSE':{
undefined 
break;
}
case 'Pred_list':{
undefined 
break;
}
case 'LineChart 1':{
undefined 
break;
}
case 'Flag':{
undefined 
break;
}
case 'Clear':{
undefined 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function GetMyPageId(){return 1;}
function GetMyProjectId(){return 168;}
RedrawRTEBGPlugins();
function RedrawRTEBGPlugins(){
if(window.RTEBackGroundPlugins != undefined){
if(window.RTEBackGroundPlugins.length&gt;0){
            for(var j=0; j &lt; window.RTEBackGroundPlugins.length; j++){
            var PluginIndex=window.RTEBackGroundPlugins[j].PluginIndex;
            var PluginDiv=window.RTEBackGroundPlugins[j].PluginDiv;
            var PluginDivId=window.RTEBackGroundPlugins[j].PluginDivId;
            IDEObject.CurrentProject.ProjectPagesList[0].UsedPluginsList[PluginIndex].Draw(PluginDiv,PluginDivId);
            }
}}};</script></page><page id='3' name='datalist'><PageHeight>undefined</PageHeight><PageWidth>undefined</PageWidth><PageBackgroundColor>undefined</PageBackgroundColor><PageCssCode></PageCssCode><PageParameters><Parameter name='PageId'><Type>label</Type><Value>3</Value><Name>PageId</Name><DisplayName>Page Id</DisplayName></Parameter><Parameter name='PageName'><Type>input</Type><Value>datalist</Value><Name>PageName</Name><DisplayName>Page Name</DisplayName></Parameter><Parameter name='PageType'><Type>Select</Type><Value>Standard,Template</Value><SelectedValue>Standard</SelectedValue><Name>PageType</Name><DisplayName>Page Type</DisplayName></Parameter><Parameter name='PageTemplateId'><Type>hidden</Type><Value></Value><Name>PageTemplateId</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='TemplatePages'><Type>hidden</Type><Value>Tempalte</Value><SelectedValue></SelectedValue><Name>TemplatePages</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='MultiTemplatePages'><Type>MultiSelection</Type><Value>{}</Value><SelectedValue></SelectedValue><Name>MultiTemplatePages</Name><DisplayName>Templates Name</DisplayName></Parameter><Parameter name='PageMenuId'><Type>hidden</Type><Value></Value><Name>PageMenuId</Name><DisplayName>Page menu name</DisplayName></Parameter><Parameter name='PreventLoadingIcon'><Type>True/False</Type><Value>0</Value><Name>PreventLoadingIcon</Name><DisplayName>Prevent Loading Icon</DisplayName></Parameter><Parameter name='RequireSensorList'><Type>True/False</Type><Value>0</Value><DisplayName>Get sensors list in RTE</DisplayName><Name>RequireSensorList</Name></Parameter><Parameter name='RequireAppList'><Type>True/False</Type><Value>0</Value><DisplayName>Get applications list in RTE</DisplayName><Name>RequireAppList</Name></Parameter><Parameter name='PageKeyword'><Type>input</Type><Value></Value><Name>PageKeyword</Name><DisplayName>Page Keywords</DisplayName></Parameter><Parameter name='PageDescription'><Type>input</Type><Value></Value><Name>PageDescription</Name><DisplayName>Description</DisplayName></Parameter><Parameter name='PageHeight'><Type>input</Type><Value>650</Value><Name>PageHeight</Name><DisplayName>Page Height</DisplayName></Parameter><Parameter name='PageWidth'><Type>input</Type><Value>1286</Value><Name>PageWidth</Name><DisplayName>Page Width</DisplayName></Parameter><Parameter name='BackGroundColor'><Type>color</Type><Value></Value><Name>BackGroundColor</Name><DisplayName>BackGround Color</DisplayName></Parameter><Parameter name='CssCode'><Type>Css</Type><Value></Value><Name>CssCode</Name><DisplayName>Page Css</DisplayName></Parameter><Parameter name='PageOnLoad'><Name>PageOnLoad</Name><Type>event</Type><Value></Value><DisplayName>OnPageLoad</DisplayName></Parameter><Parameter name='globalFunVar'><Name>globalFunVar</Name><Type>event</Type><Value>var x=1;</Value><DisplayName>Global Functions And Variables</DisplayName></Parameter><Parameter name='onclick'><Name>onclick</Name><Type>event</Type><Value></Value><DisplayName>OnClick</DisplayName></Parameter><Parameter name='ondbclick'><Name>ondbclick</Name><Type>event</Type><Value></Value><DisplayName>OnDbClick</DisplayName></Parameter><Parameter name='onrightclick'><Name>onrightclick</Name><Type>event</Type><Value></Value><DisplayName>OnRightClick</DisplayName></Parameter><Parameter name='onmousemove'><Name>onmousemove</Name><Type>event</Type><Value></Value><DisplayName>OnMouseMove</DisplayName></Parameter><Parameter name='onmouseover'><Name>onmouseover</Name><Type>event</Type><Value></Value><DisplayName>OnMouseOver</DisplayName></Parameter><Parameter name='IsPageDeleted'><Type>hidden</Type><Name>IsPageDeleted</Name><Value>true</Value><DisplayName></DisplayName></Parameter><Parameter name='SensorsReffrence'><Name>SensorsReffrence</Name><Type>hidden</Type><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateCss'><Type>hidden</Type><Name>templateCss</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateGlobalFunction'><Type>hidden</Type><Name>templateGlobalFunction</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateOnLoad'><Type>hidden</Type><Name>templateOnLoad</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='Saved'><Type>false</Type><Value>false</Value><Name>false</Name><DisplayName></DisplayName></Parameter><Parameter name='PageIssus'><Type>PageIssus</Type><Value></Value><Name>PageIssus</Name><DisplayName>Page Issues</DisplayName></Parameter></PageParameters><script>var x=1;
function Plugin_onclick(pluginName){
switch(pluginName){
case 'Page datalist':{
 
break;
}
default :
 RTECreatedPlugins_onclick();
 break;
}
}
function Plugin_ondbclick(pluginName){
switch(pluginName){
case 'Page datalist':{
 
break;
}
default :
 RTECreatedPlugins_ondbclick();
 break;
}
}
function Plugin_onmouseover(pluginName){
switch(pluginName){
case 'Page datalist':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onrightclick(pluginName){
switch(pluginName){
case 'Page datalist':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmouseleave(pluginName){
switch(pluginName){
case 'Page datalist':{
undefined 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmousemove(pluginName){
switch(pluginName){
case 'Page datalist':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function GetMyPageId(){return 2;}
function GetMyProjectId(){return 168;}
RedrawRTEBGPlugins();
function RedrawRTEBGPlugins(){
if(window.RTEBackGroundPlugins != undefined){
if(window.RTEBackGroundPlugins.length&gt;0){
            for(var j=0; j &lt; window.RTEBackGroundPlugins.length; j++){
            var PluginIndex=window.RTEBackGroundPlugins[j].PluginIndex;
            var PluginDiv=window.RTEBackGroundPlugins[j].PluginDiv;
            var PluginDivId=window.RTEBackGroundPlugins[j].PluginDivId;
            IDEObject.CurrentProject.ProjectPagesList[0].UsedPluginsList[PluginIndex].Draw(PluginDiv,PluginDivId);
            }
}}};</script></page><page id='4' name='home'><PageHeight>undefined</PageHeight><PageWidth>undefined</PageWidth><PageBackgroundColor>undefined</PageBackgroundColor><PageCssCode></PageCssCode><PageParameters><Parameter name='PageId'><Type>label</Type><Value>1</Value><Name>PageId</Name><DisplayName>Page Id</DisplayName></Parameter><Parameter name='PageName'><Type>input</Type><Value>home</Value><Name>PageName</Name><DisplayName>Page Name</DisplayName></Parameter><Parameter name='PageType'><Type>Select</Type><Value>Standard,Template</Value><SelectedValue>Standard</SelectedValue><Name>PageType</Name><DisplayName>Page Type</DisplayName></Parameter><Parameter name='PageTemplateId'><Type>hidden</Type><Value></Value><Name>PageTemplateId</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='TemplatePages'><Type>hidden</Type><Value></Value><SelectedValue></SelectedValue><Name>TemplatePages</Name><DisplayName>Template Name</DisplayName></Parameter><Parameter name='MultiTemplatePages'><Type>MultiSelection</Type><Value>{}</Value><SelectedValue></SelectedValue><Name>MultiTemplatePages</Name><DisplayName>Templates Name</DisplayName></Parameter><Parameter name='PageMenuId'><Type>hidden</Type><Value></Value><Name>PageMenuId</Name><DisplayName>Page menu name</DisplayName></Parameter><Parameter name='PreventLoadingIcon'><Type>True/False</Type><Value>0</Value><Name>PreventLoadingIcon</Name><DisplayName>Prevent Loading Icon</DisplayName></Parameter><Parameter name='RequireSensorList'><Type>True/False</Type><Value>0</Value><DisplayName>Get sensors list in RTE</DisplayName><Name>RequireSensorList</Name></Parameter><Parameter name='RequireAppList'><Type>True/False</Type><Value>0</Value><DisplayName>Get applications list in RTE</DisplayName><Name>RequireAppList</Name></Parameter><Parameter name='PageKeyword'><Type>input</Type><Value></Value><Name>PageKeyword</Name><DisplayName>Page Keywords</DisplayName></Parameter><Parameter name='PageDescription'><Type>input</Type><Value></Value><Name>PageDescription</Name><DisplayName>Description</DisplayName></Parameter><Parameter name='PageHeight'><Type>input</Type><Value>650</Value><Name>PageHeight</Name><DisplayName>Page Height</DisplayName></Parameter><Parameter name='PageWidth'><Type>input</Type><Value>1286</Value><Name>PageWidth</Name><DisplayName>Page Width</DisplayName></Parameter><Parameter name='BackGroundColor'><Type>color</Type><Value></Value><Name>BackGroundColor</Name><DisplayName>BackGround Color</DisplayName></Parameter><Parameter name='CssCode'><Type>Css</Type><Value></Value><Name>CssCode</Name><DisplayName>Page Css</DisplayName></Parameter><Parameter name='PageOnLoad'><Name>PageOnLoad</Name><Type>event</Type><Value></Value><DisplayName>OnPageLoad</DisplayName></Parameter><Parameter name='globalFunVar'><Name>globalFunVar</Name><Type>event</Type><Value></Value><DisplayName>Global Functions And Variables</DisplayName></Parameter><Parameter name='onclick'><Name>onclick</Name><Type>event</Type><Value></Value><DisplayName>OnClick</DisplayName></Parameter><Parameter name='ondbclick'><Name>ondbclick</Name><Type>event</Type><Value></Value><DisplayName>OnDbClick</DisplayName></Parameter><Parameter name='onrightclick'><Name>onrightclick</Name><Type>event</Type><Value></Value><DisplayName>OnRightClick</DisplayName></Parameter><Parameter name='onmousemove'><Name>onmousemove</Name><Type>event</Type><Value></Value><DisplayName>OnMouseMove</DisplayName></Parameter><Parameter name='onmouseover'><Name>onmouseover</Name><Type>event</Type><Value></Value><DisplayName>OnMouseOver</DisplayName></Parameter><Parameter name='IsPageDeleted'><Type>hidden</Type><Name>IsPageDeleted</Name><Value>true</Value><DisplayName></DisplayName></Parameter><Parameter name='SensorsReffrence'><Name>SensorsReffrence</Name><Type>hidden</Type><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateCss'><Type>hidden</Type><Name>templateCss</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateGlobalFunction'><Type>hidden</Type><Name>templateGlobalFunction</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='templateOnLoad'><Type>hidden</Type><Name>templateOnLoad</Name><Value></Value><DisplayName></DisplayName></Parameter><Parameter name='Saved'><Type>false</Type><Value>false</Value><Name>false</Name><DisplayName></DisplayName></Parameter><Parameter name='PageIssus'><Type>PageIssus</Type><Value></Value><Name>PageIssus</Name><DisplayName>Page Issues</DisplayName></Parameter></PageParameters><script>
function Plugin_onclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onclick();
 break;
}
}
function Plugin_ondbclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_ondbclick();
 break;
}
}
function Plugin_onmouseover(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onrightclick(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmouseleave(pluginName){
switch(pluginName){
case 'Page home':{
undefined 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function Plugin_onmousemove(pluginName){
switch(pluginName){
case 'Page home':{
 
break;
}
default :
 RTECreatedPlugins_onmouseover();
 break;
}
}
function GetMyPageId(){return 3;}
function GetMyProjectId(){return 168;}
RedrawRTEBGPlugins();
function RedrawRTEBGPlugins(){
if(window.RTEBackGroundPlugins != undefined){
if(window.RTEBackGroundPlugins.length&gt;0){
            for(var j=0; j &lt; window.RTEBackGroundPlugins.length; j++){
            var PluginIndex=window.RTEBackGroundPlugins[j].PluginIndex;
            var PluginDiv=window.RTEBackGroundPlugins[j].PluginDiv;
            var PluginDivId=window.RTEBackGroundPlugins[j].PluginDivId;
            IDEObject.CurrentProject.ProjectPagesList[0].UsedPluginsList[PluginIndex].Draw(PluginDiv,PluginDivId);
            }
}}};</script></page></project>